# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].rootAssembly.importParasolidFile(filename=
    'C:/Users/Ricardo Fitas/Desktop/MEM/MEF/Assem1.x_t', ids=(), scaleFactor=
    0.00100000004749745)
mdb.models['Model-1'].Material(name='Material-1')
mdb.models['Model-1'].materials['Material-1'].Density(table=((7800.0, ), ))
mdb.models['Model-1'].materials['Material-1'].Elastic(table=((210000000000.0, 
    0.3), ))
mdb.models['Model-1'].StaticStep(initialInc=1.0, minInc=1e-05, name='Step-1', 
    previous='Initial')
mdb.models['Model-1'].steps['Step-1'].setValues(nlgeom=ON)
mdb.models['Model-1'].rootAssembly.makeIndependent(instances=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], ))
mdb.models['Model-1'].rootAssembly.makeIndependent(instances=(
    mdb.models['Model-1'].rootAssembly.instances['G1'], ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#fffff000 #3ffff #0:10 #ffffffe0 #f30003ff #f #3000000', 
    ' #1 #0:2 #fffff000 #f ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#1fff #0:3 #ff3ffffc #1ffff #0:3 #1ff3f80 #30000000', 
    ' #3c00 #0 #ffc00000 #3f ]', ), ), size=0.0004)
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffffff:20 #1fff ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:14 #7f ]', ), ), size=0.004)
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#fffffff0 #fffff #0:4 #4000000 #0:5 #fffffff8 #ffc3ffff', 
    ' #f #3000000 #d #0:2 #fffff000 #ff ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#31fff #0:3 #ff3ffffc #1ffff #0:3 #7ff3fc0 #30000000', 
    ' #3c00 #0 #ffc00000 #3f ]', ), ), size=0.0004)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #10000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #4000 ]', ), ), number=4)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.models['Model-1'].parts['G1'].ReferencePoint(point=(0.0, 0.0, 0.0))
mdb.models['Model-1'].parts['G2'].ReferencePoint(point=(0.0, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].HomogeneousSolidSection(material='Material-1', name=
    'Section-1', thickness=None)
mdb.models['Model-1'].parts['G1'].Set(cells=
    mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(('[#1 ]', ), ), 
    name='Set-1')
mdb.models['Model-1'].parts['G1'].SectionAssignment(offset=0.0, offsetField='', 
    offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['G1'].sets['Set-1'], sectionName='Section-1', 
    thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].parts['G2'].Set(cells=
    mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(('[#1 ]', ), ), 
    name='Set-1')
mdb.models['Model-1'].parts['G2'].SectionAssignment(offset=0.0, offsetField='', 
    offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['G2'].sets['Set-1'], sectionName='Section-1', 
    thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].rootAssembly.Set(name='m_Set-5', referencePoints=(
    mdb.models['Model-1'].rootAssembly.instances['G1'].referencePoints[2], ))
mdb.models['Model-1'].rootAssembly.Surface(name='s_Surf-1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['G1'].faces.getSequenceFromMask(
    ('[#0:4 #1000000 ]', ), ))
mdb.models['Model-1'].Coupling(controlPoint=
    mdb.models['Model-1'].rootAssembly.sets['m_Set-5'], couplingType=KINEMATIC, 
    influenceRadius=WHOLE_SURFACE, localCsys=None, name='Constraint-1', 
    surface=mdb.models['Model-1'].rootAssembly.surfaces['s_Surf-1'], u1=ON, u2=
    ON, u3=ON, ur1=ON, ur2=ON, ur3=ON)
mdb.models['Model-1'].rootAssembly.Set(name='m_Set-6', referencePoints=(
    mdb.models['Model-1'].rootAssembly.instances['G2'].referencePoints[2], ))
mdb.models['Model-1'].rootAssembly.Surface(name='s_Surf-2', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['G2'].faces.getSequenceFromMask(
    ('[#0:6 #4000000 ]', ), ))
mdb.models['Model-1'].Coupling(controlPoint=
    mdb.models['Model-1'].rootAssembly.sets['m_Set-6'], couplingType=KINEMATIC, 
    influenceRadius=WHOLE_SURFACE, localCsys=None, name='Constraint-2', 
    surface=mdb.models['Model-1'].rootAssembly.surfaces['s_Surf-2'], u1=ON, u2=
    ON, u3=ON, ur1=ON, ur2=ON, ur3=ON)
mdb.models['Model-1'].ContactProperty('IntProp-1')
mdb.models['Model-1'].interactionProperties['IntProp-1'].TangentialBehavior(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.25, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].rootAssembly.Surface(name='CP-1-G2', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['G2'].faces.getSequenceFromMask(
    ('[#ffffffff:6 #7ffffff ]', ), ))
mdb.models['Model-1'].rootAssembly.Surface(name='CP-1-G1', side1Faces=
    mdb.models['Model-1'].rootAssembly.instances['G1'].faces.getSequenceFromMask(
    ('[#ffffffff:4 #ffffff ]', ), ))
mdb.models['Model-1'].SurfaceToSurfaceContactStd(adjustMethod=NONE, 
    contactControls='', createStepName='Initial', enforcement=
    SURFACE_TO_SURFACE, interactionProperty='IntProp-1', master=
    mdb.models['Model-1'].rootAssembly.surfaces['CP-1-G2'], name='CP-1-G2-G1', 
    slave=mdb.models['Model-1'].rootAssembly.surfaces['CP-1-G1'], sliding=
    FINITE, surfaceSmoothing=AUTOMATIC)
mdb.models['Model-1'].rootAssembly.Set(name='Set-7', referencePoints=(
    mdb.models['Model-1'].rootAssembly.instances['G1'].referencePoints[2], ))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-1', region=mdb.models['Model-1'].rootAssembly.sets['Set-7'], u1=0.0, 
    u2=0.0, u3=0.0, ur1=0.0, ur2=0.0, ur3=0.23)
mdb.models['Model-1'].rootAssembly.Set(name='Set-8', referencePoints=(
    mdb.models['Model-1'].rootAssembly.instances['G2'].referencePoints[2], ))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-2', region=mdb.models['Model-1'].rootAssembly.sets['Set-8'], u1=0.0, 
    u2=0.0, u3=0.0, ur1=0.0, ur2=0.0, ur3=UNSET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=6, numDomains=6, numGPUs=1, queue=None, resultsFormat=ODB, scratch=
    '', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
#* Unable to start analysis job
#* Abaqus Error: Detected lock file Job-1.lck. Please confirm that no other 
#* applications are attempting to write to the output database associated with 
#* this job before removing the lock file and resubmitting.
#* Abaqus/Analysis exited with error(s).
#* 
# Save by Ricardo Fitas on 2022_01_04-13.56.09; build 2021 2020_03_06-14.50.37 167380
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs.changeKey(fromName='Job-1', toName='CS1ob-1')
mdb.jobs.changeKey(fromName='CS1ob-1', toName='CS1_job')
mdb.jobs['CS1_job'].submit(consistencyChecking=OFF)
mdb.jobs['CS1_job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '64 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\CS1_job.odb', 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 28592, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 957.0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(MINIMUM_MEMORY, {'minimum_memory': 140.0, 
    'phase': STANDARD_PHASE, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.79 D.O.F. 2 ratio = 2.25690E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 205 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0, 'increment': 1, 
    'attempts': ' 1U', 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 1, 'jobName': 'CS1_job', 
    'severe': 1, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.260 D.O.F. 2 ratio = 8.37314E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 130 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 16 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0, 'increment': 1, 
    'attempts': ' 2U', 'iterations': 3, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.25, 'stepTime': 0.0, 'step': 1, 'jobName': 'CS1_job', 
    'severe': 2, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.260 D.O.F. 2 ratio = 8.37314E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 9 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.models['Model-1'].steps['Step-1'].setValues(initialInc=0.01)
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0625, 'increment': 1, 
    'attempts': 3, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0625, 'stepTime': 0.0625, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 8, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.125, 'increment': 2, 
    'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0625, 'stepTime': 0.125, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 5, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.21875, 'increment': 3, 
    'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.09375, 'stepTime': 0.21875, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 4, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job'].submit(consistencyChecking=OFF)
mdb.jobs['CS1_job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '64 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\CS1_job.odb', 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 21900, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 957.0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(MINIMUM_MEMORY, {'minimum_memory': 140.0, 
    'phase': STANDARD_PHASE, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.79 D.O.F. 2 ratio = 2.25690E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.01, 'increment': 1, 
    'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.01, 'stepTime': 0.01, 'step': 1, 'jobName': 'CS1_job', 
    'severe': 3, 'equilibrium': 2})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.230 D.O.F. 2 ratio = 15.1828E+09 .', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.02, 'increment': 2, 
    'attempts': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.01, 'stepTime': 0.02, 'step': 1, 'jobName': 'CS1_job', 
    'severe': 2, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.230 D.O.F. 2 ratio = 7.35473E+09.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.035, 'increment': 3, 
    'attempts': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.015, 'stepTime': 0.035, 'step': 1, 'jobName': 'CS1_job', 
    'severe': 0, 'equilibrium': 3})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0575, 'increment': 4, 
    'attempts': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0225, 'stepTime': 0.0575, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 0, 'equilibrium': 3})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.09125, 'increment': 5, 
    'attempts': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.03375, 'stepTime': 0.09125, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 0, 'equilibrium': 3})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.141875, 'increment': 6, 
    'attempts': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.050625, 'stepTime': 0.141875, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 0, 'equilibrium': 3})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.2178125, 'increment': 7, 
    'attempts': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0759375, 'stepTime': 0.2178125, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 3, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.33171875, 'increment': 8, 
    'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.11390625, 'stepTime': 0.33171875, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 4, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'CS1_job'})
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(ur3=23.0)
mdb.jobs['CS1_job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job'].submit(consistencyChecking=OFF)
mdb.jobs['CS1_job']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job'].submit(consistencyChecking=OFF)
mdb.jobs['CS1_job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '64 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\CS1_job.odb', 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 19984, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 957.0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(MINIMUM_MEMORY, {'minimum_memory': 140.0, 
    'phase': STANDARD_PHASE, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.79 D.O.F. 2 ratio = 2.25690E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 205 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0, 'increment': 1, 
    'attempts': ' 1U', 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.01, 'stepTime': 0.0, 'step': 1, 'jobName': 'CS1_job', 
    'severe': 1, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.260 D.O.F. 2 ratio = 8.37314E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 130 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 16 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0, 'increment': 1, 
    'attempts': ' 2U', 'iterations': 3, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0025, 'stepTime': 0.0, 'step': 1, 'jobName': 'CS1_job', 
    'severe': 2, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.260 D.O.F. 2 ratio = 8.37314E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 9 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.000625, 'increment': 1, 
    'attempts': 3, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.000625, 'stepTime': 0.000625, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 8, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.00125, 'increment': 2, 
    'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.000625, 'stepTime': 0.00125, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 5, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0021875, 'increment': 3, 
    'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0009375, 'stepTime': 0.0021875, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 4, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.00359375, 'increment': 4, 
    'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00140625, 'stepTime': 0.00359375, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 4, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.005703125, 'increment': 5, 
    'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.002109375, 'stepTime': 0.005703125, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 4, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0088671875, 
    'increment': 6, 'attempts': 1, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0031640625, 'stepTime': 0.0088671875, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 3, 'equilibrium': 3})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.01361328125, 
    'increment': 7, 'attempts': 1, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00474609375, 'stepTime': 0.01361328125, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 2, 'equilibrium': 5})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.018359375, 'increment': 8, 
    'attempts': 1, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00474609375, 'stepTime': 0.018359375, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 7, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.02310546875, 
    'increment': 9, 'attempts': 1, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00474609375, 'stepTime': 0.02310546875, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 9, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.030224609375, 
    'increment': 10, 'attempts': 1, 'iterations': 11, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.007119140625, 'stepTime': 0.030224609375, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 11, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 8 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 23 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 135 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.512 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.1041 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.1041 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.1041 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.874 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.874 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.874 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.1407 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.1407 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.1407 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.2886 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.2886 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.2886 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.13961 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.13961 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.13961 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.13794 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.13794 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.13794 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.10564 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.10564 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.10564 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.10731 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.10731 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.10731 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.7334 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.7334 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.7334 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.7501 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.7501 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.7501 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.4271 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.4271 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.4271 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.4104 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.4104 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.4104 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.4637 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.4637 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.4637 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.6116 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.6116 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.6116 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.7867 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.7867 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.7867 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.9346 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.9346 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.9346 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.14788 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.14788 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.14788 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.14489 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.14489 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.14489 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.15806 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.15806 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.15806 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.11097 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.11097 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.11097 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.12576 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.12576 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.12576 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.14327 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.14327 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.14327 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.14767 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.14767 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.14767 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.16013 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.16013 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.16013 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.15908 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.15908 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.15908 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.14664 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.14664 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.14664 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.8307 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.8307 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.8307 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.8328 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.8328 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.8328 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.8204 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.8204 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.8204 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.11537 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.11537 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.11537 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.8029 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.8029 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.8029 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.9448 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.9448 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.9448 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.11259 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.11259 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.11259 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.11434 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.11434 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.11434 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.11558 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.11558 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.11558 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.12678 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.12678 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.12678 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.12783 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.12783 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.12783 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.1847 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.1847 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.1847 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.1868 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.1868 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.1868 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.1744 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.1744 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.1744 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.3124 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.3124 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.3124 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.2066 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.2066 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.2066 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.1867 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.1867 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.1867 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.2988 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.2988 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.2988 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.1569 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.1569 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.1569 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.4799 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.4799 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.4799 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.4974 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.4974 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.4974 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.5077 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.5077 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.5077 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.5098 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.5098 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.5098 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.6218 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.6218 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.6218 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.9584 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.9584 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.9584 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.8526 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.8526 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.8526 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.16044 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.16044 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.16044 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.14986 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.14986 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.14986 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.12814 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.12814 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.12814 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.11756 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.11756 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.11756 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.6354 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.6354 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.6354 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.5097 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.5097 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.5097 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.5296 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.5296 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.5296 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.8327 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.8327 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.8327 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.11557 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.030224609375, 
    'increment': 11, 'attempts': ' 1U', 'iterations': 4, 
    'phase': STANDARD_PHASE, 'timeIncrement': 0.0106787109375, 
    'stepTime': 0.030224609375, 'step': 1, 'jobName': 'CS1_job', 'severe': 3, 
    'equilibrium': 1})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.032894287109375, 
    'increment': 11, 'attempts': 2, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.002669677734375, 'stepTime': 0.032894287109375, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 5, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0368988037109375, 
    'increment': 12, 'attempts': 1, 'iterations': 8, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0040045166015625, 'stepTime': 0.0368988037109375, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 6, 'equilibrium': 2})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0429055786132813, 
    'increment': 13, 'attempts': 1, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00600677490234375, 'stepTime': 0.0429055786132813, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 5, 'equilibrium': 4})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0519157409667969, 
    'increment': 14, 'attempts': 1, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00901016235351563, 'stepTime': 0.0519157409667969, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 0, 'equilibrium': 9})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0609259033203125, 
    'increment': 15, 'attempts': 1, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00901016235351563, 'stepTime': 0.0609259033203125, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 2, 'equilibrium': 7})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0699360656738281, 
    'increment': 16, 'attempts': 1, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00901016235351563, 'stepTime': 0.0699360656738281, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 2, 'equilibrium': 7})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0789462280273438, 
    'increment': 17, 'attempts': 1, 'iterations': 9, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00901016235351563, 'stepTime': 0.0789462280273438, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 3, 'equilibrium': 6})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'CS1_job'})
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffffff:6 #fcffffff #ffffffff:6 #fff3ffff #ffffffff:6 #fff ]', ), 
    )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:4 #ff3fffff #ffffffff:4 #ffff3fff #ffffffff:4 #3f ]', ), 
    ), size=0.0005)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #10000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #1000 ]', ), ), number=4)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.jobs['CS1_job'].submit(consistencyChecking=OFF)
mdb.jobs['CS1_job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\CS1_job.odb', 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 9912, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 2001.0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(MINIMUM_MEMORY, {'minimum_memory': 266.0, 
    'phase': STANDARD_PHASE, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.135 D.O.F. 2 ratio = 7.24244E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 411 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0, 'increment': 1, 
    'attempts': ' 1U', 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.01, 'stepTime': 0.0, 'step': 1, 'jobName': 'CS1_job', 
    'severe': 1, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.49 D.O.F. 2 ratio = 1.09199E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 7 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 67 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 62 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0, 'increment': 1, 
    'attempts': ' 2U', 'iterations': 3, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0025, 'stepTime': 0.0, 'step': 1, 'jobName': 'CS1_job', 
    'severe': 2, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.49 D.O.F. 2 ratio = 1.09199E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0, 'increment': 1, 
    'attempts': ' 3U', 'iterations': 4, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.000625, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 4, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.49 D.O.F. 2 ratio = 1.09199E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.00015625, 'increment': 1, 
    'attempts': 4, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00015625, 'stepTime': 0.00015625, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 4, 'equilibrium': 2})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0003125, 'increment': 2, 
    'attempts': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00015625, 'stepTime': 0.0003125, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 2, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.000546875, 'increment': 3, 
    'attempts': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.000234375, 'stepTime': 0.000546875, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 0, 'equilibrium': 3})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0008984375, 
    'increment': 4, 'attempts': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0003515625, 'stepTime': 0.0008984375, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 0, 'equilibrium': 3})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.00142578125, 
    'increment': 5, 'attempts': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00052734375, 'stepTime': 0.00142578125, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 2, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.49 D.O.F. 2 ratio = 156.759E+09  .', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.002216796875, 
    'increment': 6, 'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.000791015625, 'stepTime': 0.002216796875, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 1, 'equilibrium': 4})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.49 D.O.F. 2 ratio = 12.9263E+09 .', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0034033203125, 
    'increment': 7, 'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0011865234375, 'stepTime': 0.0034033203125, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 0, 'equilibrium': 5})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.00458984375, 
    'increment': 8, 'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0011865234375, 'stepTime': 0.00458984375, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 4, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0057763671875, 
    'increment': 9, 'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0011865234375, 'stepTime': 0.0057763671875, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 1, 'equilibrium': 4})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.00755615234375, 
    'increment': 10, 'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00177978515625, 'stepTime': 0.00755615234375, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 4, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.010225830078125, 
    'increment': 11, 'attempts': 1, 'iterations': 8, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.002669677734375, 'stepTime': 0.010225830078125, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 7, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0142303466796875, 
    'increment': 12, 'attempts': 1, 'iterations': 11, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0040045166015625, 'stepTime': 0.0142303466796875, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 11, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0202371215820313, 
    'increment': 13, 'attempts': 1, 'iterations': 8, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00600677490234375, 'stepTime': 0.0202371215820313, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 4, 'equilibrium': 4})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0292472839355469, 
    'increment': 14, 'attempts': 1, 'iterations': 13, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00901016235351563, 'stepTime': 0.0292472839355469, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 13, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 34 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 378 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8529 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8529 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8529 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.2312 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.2312 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.2312 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8820 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8820 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8820 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11925 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11925 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11925 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56325 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56325 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56325 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44376 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44376 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44376 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32427 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32427 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32427 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56616 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56616 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56616 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44667 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44667 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44667 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32718 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32718 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32718 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20769 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20769 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20769 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20478 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20478 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20478 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8130 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8130 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8130 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20079 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20079 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20079 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.55926 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.55926 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.55926 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43977 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43977 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43977 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56244 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56244 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56244 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44295 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44295 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44295 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32028 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32028 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32028 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32346 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32346 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32346 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20397 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20397 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20397 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8448 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8448 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8448 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.14261 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.14261 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.14261 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26210 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26210 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26210 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.38159 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.38159 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.38159 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.50108 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.50108 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.50108 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.23874 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.23874 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.23874 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56039 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56039 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56039 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44090 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44090 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44090 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56031 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56031 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56031 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.35823 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.35823 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.35823 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44082 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44082 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44082 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.47772 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.47772 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.47772 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59721 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59721 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59721 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.7707 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.7707 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.7707 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.2256 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.2256 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.2256 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.7845 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.7845 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.7845 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.55503 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.55503 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.55503 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43554 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43554 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43554 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.31605 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.31605 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.31605 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.19656 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.19656 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.19656 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.14205 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.14205 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.14205 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.19794 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.19794 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.19794 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.55641 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.55641 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.55641 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.2313 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.2313 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.2313 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8235 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8235 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8235 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.14262 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.14262 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.14262 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20184 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20184 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20184 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26211 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26211 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26211 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.31743 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.31743 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.31743 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32133 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32133 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32133 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.38160 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.38160 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.38160 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43692 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43692 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43692 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.50109 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.50109 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.50109 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26154 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26154 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26154 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.6876 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.6876 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.6876 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.2205 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.2205 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.2205 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.54672 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0292472839355469, 
    'increment': 15, 'attempts': ' 1U', 'iterations': 3, 
    'phase': STANDARD_PHASE, 'timeIncrement': 0.0135152435302734, 
    'stepTime': 0.0292472839355469, 'step': 1, 'jobName': 'CS1_job', 
    'severe': 2, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0326260948181152, 
    'increment': 15, 'attempts': 2, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00337881088256836, 'stepTime': 0.0326260948181152, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 7, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0376943111419678, 
    'increment': 16, 'attempts': 1, 'iterations': 8, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00506821632385254, 'stepTime': 0.0376943111419678, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 8, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0452966356277466, 
    'increment': 17, 'attempts': 1, 'iterations': 10, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00760232448577881, 'stepTime': 0.0452966356277466, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 10, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0452966356277466, 
    'increment': 18, 'attempts': ' 1U', 'iterations': 3, 
    'phase': STANDARD_PHASE, 'timeIncrement': 0.0114034867286682, 
    'stepTime': 0.0452966356277466, 'step': 1, 'jobName': 'CS1_job', 
    'severe': 2, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0481475073099136, 
    'increment': 18, 'attempts': 2, 'iterations': 8, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00285087168216705, 'stepTime': 0.0481475073099136, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 8, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0524238148331642, 
    'increment': 19, 'attempts': 1, 'iterations': 10, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00427630752325058, 'stepTime': 0.0524238148331642, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 9, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0588382761180401, 
    'increment': 20, 'attempts': 1, 'iterations': 8, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00641446128487587, 'stepTime': 0.0588382761180401, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 8, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0684599680453539, 
    'increment': 21, 'attempts': 1, 'iterations': 12, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00962169192731381, 'stepTime': 0.0684599680453539, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 12, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0684599680453539, 
    'increment': 22, 'attempts': ' 1U', 'iterations': 2, 
    'phase': STANDARD_PHASE, 'timeIncrement': 0.0144325378909707, 
    'stepTime': 0.0684599680453539, 'step': 1, 'jobName': 'CS1_job', 
    'severe': 1, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0720681025180966, 
    'increment': 22, 'attempts': 2, 'iterations': 11, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00360813447274268, 'stepTime': 0.0720681025180966, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 10, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0774803042272106, 
    'increment': 23, 'attempts': 1, 'iterations': 10, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00541220170911402, 'stepTime': 0.0774803042272106, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 10, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'CS1_job'})
mdb.models['Model-1'].steps['Step-1'].setValues(initialInc=0.001, maxNumInc=
    1000, minInc=1e-06)
mdb.jobs['CS1_job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job'].submit(consistencyChecking=OFF)
mdb.jobs['CS1_job']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job'].submit(consistencyChecking=OFF)
mdb.jobs['CS1_job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\CS1_job.odb', 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 10276, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 2001.0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(MINIMUM_MEMORY, {'minimum_memory': 266.0, 
    'phase': STANDARD_PHASE, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.135 D.O.F. 2 ratio = 7.24244E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 12 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 52 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.1499 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G1.22661 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8458 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8458 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8458 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8582 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8582 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8582 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32356 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32356 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32356 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32480 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32480 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32480 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20531 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20531 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20531 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20407 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20407 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20407 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.55930 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.55930 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.55930 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56254 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56254 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56254 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56378 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56378 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56378 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.50285 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.50285 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.50285 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59479 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59479 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59479 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56197 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56197 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56197 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56012 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56012 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56012 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56282 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56282 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56282 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44429 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44429 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44429 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44305 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44305 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44305 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32032 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32032 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32032 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26387 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26387 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26387 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.38336 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.38336 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.38336 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43981 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43981 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43981 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.35581 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.35581 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.35581 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32114 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32114 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32114 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32299 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32299 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32299 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32384 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32384 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32384 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44063 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44063 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44063 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44248 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44248 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44248 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44333 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44333 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44333 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.47530 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.47530 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.47530 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.2585 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.2585 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.2585 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.2542 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.2542 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.2542 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8134 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8134 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8134 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8216 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8216 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8216 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11683 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11683 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11683 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8017 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8017 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8017 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.23632 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.23632 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.23632 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.2489 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.2489 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.2489 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8401 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8401 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8401 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8486 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8486 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.8486 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.14438 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.14438 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.14438 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20083 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20083 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20083 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20165 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20165 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20165 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20350 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20350 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20350 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20435 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20435 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.20435 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32416 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32416 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32416 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56314 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56314 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56314 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.50424 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.50424 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.50424 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44365 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44365 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44365 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.38475 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.38475 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.38475 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26526 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26526 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26526 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.50381 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.50381 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.50381 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56024 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56024 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56024 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56252 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56252 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56252 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56193 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56193 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.56193 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26483 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26483 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26483 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32126 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32126 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32126 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44303 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44303 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44303 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32295 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32295 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32295 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32354 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32354 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.32354 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.38432 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.38432 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.38432 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44075 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44075 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44075 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44244 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44244 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.44244 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.14534 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.14534 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.14534 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.14491 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.14491 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.14491 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.19966 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.19966 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.19966 D.O.F. 3.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26440 D.O.F. 1.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26440 D.O.F. 2.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0, 'increment': 1, 
    'attempts': ' 1U', 'iterations': 4, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.001, 'stepTime': 0.0, 'step': 1, 'jobName': 'CS1_job', 
    'severe': 4, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.00025, 'increment': 1, 
    'attempts': 2, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00025, 'stepTime': 0.00025, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 5, 'equilibrium': 2})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0005, 'increment': 2, 
    'attempts': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00025, 'stepTime': 0.0005, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 3, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.000875, 'increment': 3, 
    'attempts': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.000375, 'stepTime': 0.000875, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 1, 'equilibrium': 2})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0014375, 'increment': 4, 
    'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0005625, 'stepTime': 0.0014375, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 4, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.00228125, 'increment': 5, 
    'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00084375, 'stepTime': 0.00228125, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 2, 'equilibrium': 3})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.003546875, 'increment': 6, 
    'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.001265625, 'stepTime': 0.003546875, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 0, 'equilibrium': 5})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0048125, 'increment': 7, 
    'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.001265625, 'stepTime': 0.0048125, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 4, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.006078125, 'increment': 8, 
    'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.001265625, 'stepTime': 0.006078125, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 4, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0079765625, 
    'increment': 9, 'attempts': 1, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0018984375, 'stepTime': 0.0079765625, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 5, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.01082421875, 
    'increment': 10, 'attempts': 1, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00284765625, 'stepTime': 0.01082421875, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 5, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.015095703125, 
    'increment': 11, 'attempts': 1, 'iterations': 11, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.004271484375, 'stepTime': 0.015095703125, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 11, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.015095703125, 
    'increment': 12, 'attempts': ' 1U', 'iterations': 5, 
    'phase': STANDARD_PHASE, 'timeIncrement': 0.0064072265625, 
    'stepTime': 0.015095703125, 'step': 1, 'jobName': 'CS1_job', 'severe': 5, 
    'equilibrium': 0})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.016697509765625, 
    'increment': 12, 'attempts': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.001601806640625, 'stepTime': 0.016697509765625, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 3, 'equilibrium': 2})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'CS1_job'})
mdb.models['Model-1'].steps['Step-1'].setValues(initialInc=1e-05, minInc=1e-08)
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffffff:20 #1fff ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:14 #7f ]', ), ), size=0.01)
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffffff #7ffff #0:4 #fcfffffe #1fffff #0:4 #fffffff0', 
    ' #fff3ffff #cf00f #3000000 #5 #0 #ffef000 #fffff000', ' #fff ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#ffffffff #7fff #0:2 #ff3ffffc #1ffff #0:2 #fffffff0', 
    ' #ffff3fff #3000000f #3c00 #c0000000 #ffffffff #3f ]', ), ), size=0.0002)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #10000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #4000 ]', ), ), number=4)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.jobs['CS1_job'].submit(consistencyChecking=OFF)
mdb.jobs['CS1_job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '32 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\CS1_job.odb', 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 36524, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'memory': 2984.0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(MINIMUM_MEMORY, {'minimum_memory': 393.0, 
    'phase': STANDARD_PHASE, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.213 D.O.F. 2 ratio = 1.00022E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.213 D.O.F. 2 ratio = 992.064E+09  .', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 1e-05, 'increment': 1, 
    'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1e-05, 'stepTime': 1e-05, 'step': 1, 'jobName': 'CS1_job', 
    'severe': 0, 'equilibrium': 2})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.213 D.O.F. 2 ratio = 2.37646E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.213 D.O.F. 2 ratio = 2.18461E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 2e-05, 'increment': 2, 
    'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1e-05, 'stepTime': 2e-05, 'step': 1, 'jobName': 'CS1_job', 
    'severe': 0, 'equilibrium': 2})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.213 D.O.F. 2 ratio = 1.50631E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.213 D.O.F. 2 ratio = 1.35739E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 3.5e-05, 'increment': 3, 
    'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.5e-05, 'stepTime': 3.5e-05, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 0, 'equilibrium': 2})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.213 D.O.F. 2 ratio = 1.24386E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.213 D.O.F. 2 ratio = 1.29862E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 5.75e-05, 'increment': 4, 
    'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 2.25e-05, 'stepTime': 5.75e-05, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 0, 'equilibrium': 2})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.213 D.O.F. 2 ratio = 1.36480E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 9.125e-05, 'increment': 5, 
    'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 3.375e-05, 'stepTime': 9.125e-05, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 4, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.000141875, 'increment': 6, 
    'attempts': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'timeIncrement': 5.0625e-05, 'stepTime': 0.000141875, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 3, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0002178125, 
    'increment': 7, 'attempts': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'timeIncrement': 7.59375e-05, 'stepTime': 0.0002178125, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 2, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.238 D.O.F. 2 ratio = 62.5193E+09 .', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.00033171875, 
    'increment': 8, 'attempts': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00011390625, 'stepTime': 0.00033171875, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 2, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.238 D.O.F. 2 ratio = 12.0315E+09 .', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.000502578125, 
    'increment': 9, 'attempts': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.000170859375, 'stepTime': 0.000502578125, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 4, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0007588671875, 
    'increment': 10, 'attempts': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0002562890625, 'stepTime': 0.0007588671875, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 4, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.00114330078125, 
    'increment': 11, 'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00038443359375, 'stepTime': 0.00114330078125, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 4, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.001719951171875, 
    'increment': 12, 'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.000576650390625, 'stepTime': 0.001719951171875, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 5, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0025849267578125, 
    'increment': 13, 'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0008649755859375, 'stepTime': 0.0025849267578125, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 4, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.238 D.O.F. 2 ratio = 5.08064E+09.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.00388239013671875, 
    'increment': 14, 'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00129746337890625, 'stepTime': 0.00388239013671875, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 3, 'equilibrium': 2})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.00582858520507813, 
    'increment': 15, 'attempts': 1, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00194619506835938, 'stepTime': 0.00582858520507813, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 4, 'equilibrium': 2})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.00874787780761719, 
    'increment': 16, 'attempts': 1, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00291929260253906, 'stepTime': 0.00874787780761719, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 5, 'equilibrium': 2})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0131268167114258, 
    'increment': 17, 'attempts': 1, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0043789389038086, 'stepTime': 0.0131268167114258, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 4, 'equilibrium': 3})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 7 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0131268167114258, 
    'increment': 18, 'attempts': ' 1U', 'iterations': 6, 
    'phase': STANDARD_PHASE, 'timeIncrement': 0.00656840835571289, 
    'stepTime': 0.0131268167114258, 'step': 1, 'jobName': 'CS1_job', 
    'severe': 6, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'CS1_job'})
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#fffffc00 #1ff #0:10 #ffffc000 #3f001fff #f #0:4', 
    ' #ff0ff000 #f ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#7ffff #0:3 #ff3fff80 #fff #0:3 #fff3fff #0', 
    ' #800 #0 #fffc0000 #3f ]', ), ), size=1e-05)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:11 #400 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:19 #4000000 ]', ), ), number=4)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
#*mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
#*    mdb.models['Model-1'].rootAssembly.instances['G2'], 
#*    mdb.models['Model-1'].rootAssembly.instances['G1']))
#* Command Interrupted
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffffff #7ffffff #0:4 #fcffffc0 #f7ff #0:3 #f0000000', 
    ' #ffffffff #fff3ffff #700f #ff000000 #f #0 #ff0f000', ' #fffff000 #fff ]', 
    ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#ffffffff #7fff #0 #f0000000 #ff3fffff #7fffff #0:2', 
    ' #ffffffe0 #ffff3fff #3c00000f #3fc00 #c0000000 #ffffffff #3f ]', ), ), 
    size=0.0002)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #800000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #100 ]', ), ), number=4)
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:12 #100000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:5 #18 ]', ), ), size=1e-05)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.models['Model-1'].rootAssembly.Set(elements=
    mdb.models['Model-1'].rootAssembly.instances['G2'].elements.getSequenceFromMask(
    mask=('[#0:613 #400000 #0:632 #400 #0:631 #40000000 #0:632', ' #40000 ]', 
    ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].elements.getSequenceFromMask(
    mask=('[#0:587 #80 #0:587 #2000 #0:587 #80000 #0:587', ' #2000000 ]', ), ), 
    name='PoorElements-1')
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:12 #100000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:5 #18 ]', ), ), size=0.0002)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.jobs['CS1_job'].submit(consistencyChecking=OFF)
mdb.jobs['CS1_job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '24 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\CS1_job.odb', 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 21576, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'CS1_job', 'memory': 3270.0})
mdb.jobs['CS1_job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(MINIMUM_MEMORY, {'minimum_memory': 429.0, 
    'phase': STANDARD_PHASE, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 6.98218E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 7.01431E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 1e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 1e-05, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 5.84791E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 6.37206E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 2e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 2, 'stepTime': 2e-05, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.08277E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.48915E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 3.5e-05, 'attempts': 1, 
    'timeIncrement': 1.5e-05, 'increment': 3, 'stepTime': 3.5e-05, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.27573E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.26293E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 5.75e-05, 'attempts': 1, 
    'timeIncrement': 2.25e-05, 'increment': 4, 'stepTime': 5.75e-05, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.55849E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'CS1_job'})
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.25, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].interactionProperties['IntProp-1'].NormalBehavior(
    allowSeparation=ON, constraintEnforcementMethod=DEFAULT, 
    pressureOverclosure=HARD)
mdb.jobs['CS1_job'].submit(consistencyChecking=OFF)
mdb.jobs['CS1_job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '24 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\CS1_job.odb', 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 9920, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'CS1_job', 'memory': 3270.0})
mdb.jobs['CS1_job']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(MINIMUM_MEMORY, {'minimum_memory': 429.0, 
    'phase': STANDARD_PHASE, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 6.98218E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 7.01431E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 1e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 1e-05, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 5.84791E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 6.37206E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 2e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 2, 'stepTime': 2e-05, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.08277E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.48915E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 3.5e-05, 'attempts': 1, 
    'timeIncrement': 1.5e-05, 'increment': 3, 'stepTime': 3.5e-05, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.27573E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.26293E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 5.75e-05, 'attempts': 1, 
    'timeIncrement': 2.25e-05, 'increment': 4, 'stepTime': 5.75e-05, 'step': 1, 
    'jobName': 'CS1_job', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.55849E+12.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 9.125e-05, 'attempts': 1, 
    'timeIncrement': 3.375e-05, 'increment': 5, 'stepTime': 9.125e-05, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.000141875, 'attempts': 1, 
    'timeIncrement': 5.0625e-05, 'increment': 6, 'stepTime': 0.000141875, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 3, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0002178125, 'attempts': 1, 
    'timeIncrement': 7.59375e-05, 'increment': 7, 'stepTime': 0.0002178125, 
    'step': 1, 'jobName': 'CS1_job', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.268 D.O.F. 2 ratio = 39.9999E+09 .', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.00033171875, 
    'attempts': 1, 'timeIncrement': 0.00011390625, 'increment': 8, 
    'stepTime': 0.00033171875, 'step': 1, 'jobName': 'CS1_job', 'severe': 2, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.268 D.O.F. 2 ratio = 7.79661E+09.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.000502578125, 
    'attempts': 1, 'timeIncrement': 0.000170859375, 'increment': 9, 
    'stepTime': 0.000502578125, 'step': 1, 'jobName': 'CS1_job', 'severe': 3, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0007588671875, 
    'attempts': 1, 'timeIncrement': 0.0002562890625, 'increment': 10, 
    'stepTime': 0.0007588671875, 'step': 1, 'jobName': 'CS1_job', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.00114330078125, 
    'attempts': 1, 'timeIncrement': 0.00038443359375, 'increment': 11, 
    'stepTime': 0.00114330078125, 'step': 1, 'jobName': 'CS1_job', 'severe': 4, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.001719951171875, 
    'attempts': 1, 'timeIncrement': 0.000576650390625, 'increment': 12, 
    'stepTime': 0.001719951171875, 'step': 1, 'jobName': 'CS1_job', 
    'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0025849267578125, 
    'attempts': 1, 'timeIncrement': 0.0008649755859375, 'increment': 13, 
    'stepTime': 0.0025849267578125, 'step': 1, 'jobName': 'CS1_job', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.268 D.O.F. 2 ratio = 6.36806E+09.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.00388239013671875, 
    'attempts': 1, 'timeIncrement': 0.00129746337890625, 'increment': 14, 
    'stepTime': 0.00388239013671875, 'step': 1, 'jobName': 'CS1_job', 
    'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.00582858520507813, 
    'attempts': 1, 'timeIncrement': 0.00194619506835938, 'increment': 15, 
    'stepTime': 0.00582858520507813, 'step': 1, 'jobName': 'CS1_job', 
    'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.00874787780761719, 
    'attempts': 1, 'timeIncrement': 0.00291929260253906, 'increment': 16, 
    'stepTime': 0.00874787780761719, 'step': 1, 'jobName': 'CS1_job', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'CS1_job'})
del mdb.models['Model-1'].boundaryConditions['BC-1']
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
del mdb.models['Model-1'].boundaryConditions['BC-2']
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.models['Model-1'].rootAssembly.Set(name='Set-21', referencePoints=(
    mdb.models['Model-1'].rootAssembly.instances['G1'].referencePoints[2], ))
mdb.models['Model-1'].VelocityBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-1', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-21'], v1=0.0, v2=0.0, 
    v3=0.0, vr1=0.0, vr2=0.0, vr3=20.0)
mdb.jobs['CS1_job']._Message(STATUS, {'totalTime': 0.0116671704101563, 
    'attempts': 1, 'timeIncrement': 0.00291929260253906, 'increment': 17, 
    'stepTime': 0.0116671704101563, 'step': 1, 'jobName': 'CS1_job', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['CS1_job']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'CS1_job'})
mdb.models['Model-1'].rootAssembly.Set(name='Set-22', referencePoints=(
    mdb.models['Model-1'].rootAssembly.instances['G2'].referencePoints[2], ))
mdb.models['Model-1'].VelocityBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-2', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-22'], v1=0.0, v2=0.0, 
    v3=0.0, vr1=0.0, vr2=0.0, vr3=UNSET)
mdb.jobs['CS1_job']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'CS1_job'})
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=70, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-2', nodalOutputPrecision=SINGLE, 
    numCpus=6, numDomains=6, numGPUs=1, queue=None, resultsFormat=ODB, scratch=
    '', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '24 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 4312, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 3270.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 429.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 6.98218E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 7.01431E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 1e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 5.84791E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 6.37206E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 2, 'stepTime': 2e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.08277E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.48915E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.5e-05, 'attempts': 1, 
    'timeIncrement': 1.5e-05, 'increment': 3, 'stepTime': 3.5e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.27573E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.26293E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5.75e-05, 'attempts': 1, 
    'timeIncrement': 2.25e-05, 'increment': 4, 'stepTime': 5.75e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.55849E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 9.125e-05, 'attempts': 1, 
    'timeIncrement': 3.375e-05, 'increment': 5, 'stepTime': 9.125e-05, 
    'step': 1, 'jobName': 'Job-2', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.000141875, 'attempts': 1, 
    'timeIncrement': 5.0625e-05, 'increment': 6, 'stepTime': 0.000141875, 
    'step': 1, 'jobName': 'Job-2', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0002178125, 'attempts': 1, 
    'timeIncrement': 7.59375e-05, 'increment': 7, 'stepTime': 0.0002178125, 
    'step': 1, 'jobName': 'Job-2', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00033171875, 'attempts': 1, 
    'timeIncrement': 0.00011390625, 'increment': 8, 'stepTime': 0.00033171875, 
    'step': 1, 'jobName': 'Job-2', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.000502578125, 'attempts': 1, 
    'timeIncrement': 0.000170859375, 'increment': 9, 
    'stepTime': 0.000502578125, 'step': 1, 'jobName': 'Job-2', 'severe': 3, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0007588671875, 
    'attempts': 1, 'timeIncrement': 0.0002562890625, 'increment': 10, 
    'stepTime': 0.0007588671875, 'step': 1, 'jobName': 'Job-2', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00114330078125, 
    'attempts': 1, 'timeIncrement': 0.00038443359375, 'increment': 11, 
    'stepTime': 0.00114330078125, 'step': 1, 'jobName': 'Job-2', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.001719951171875, 
    'attempts': 1, 'timeIncrement': 0.000576650390625, 'increment': 12, 
    'stepTime': 0.001719951171875, 'step': 1, 'jobName': 'Job-2', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0025849267578125, 
    'attempts': 1, 'timeIncrement': 0.0008649755859375, 'increment': 13, 
    'stepTime': 0.0025849267578125, 'step': 1, 'jobName': 'Job-2', 'severe': 3, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00388239013671875, 
    'attempts': 1, 'timeIncrement': 0.00129746337890625, 'increment': 14, 
    'stepTime': 0.00388239013671875, 'step': 1, 'jobName': 'Job-2', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00582858520507813, 
    'attempts': 1, 'timeIncrement': 0.00194619506835938, 'increment': 15, 
    'stepTime': 0.00582858520507813, 'step': 1, 'jobName': 'Job-2', 
    'severe': 6, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].materials['Material-1'].density.setValues(table=((
    7800000000.0, ), ))
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '24 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 18768, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 3270.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 429.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 6.98218E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 7.01431E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 1e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 5.84791E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 6.37206E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 2, 'stepTime': 2e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.08277E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.48915E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.5e-05, 'attempts': 1, 
    'timeIncrement': 1.5e-05, 'increment': 3, 'stepTime': 3.5e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.27573E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.26293E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5.75e-05, 'attempts': 1, 
    'timeIncrement': 2.25e-05, 'increment': 4, 'stepTime': 5.75e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.55849E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 9.125e-05, 'attempts': 1, 
    'timeIncrement': 3.375e-05, 'increment': 5, 'stepTime': 9.125e-05, 
    'step': 1, 'jobName': 'Job-2', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.000141875, 'attempts': 1, 
    'timeIncrement': 5.0625e-05, 'increment': 6, 'stepTime': 0.000141875, 
    'step': 1, 'jobName': 'Job-2', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0002178125, 'attempts': 1, 
    'timeIncrement': 7.59375e-05, 'increment': 7, 'stepTime': 0.0002178125, 
    'step': 1, 'jobName': 'Job-2', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-2'].setValues(vr3=0.0)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '24 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 32208, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 3270.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 429.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 1e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 2, 'stepTime': 2e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].rootAssembly.Set(name='Set-23', referencePoints=(
    mdb.models['Model-1'].rootAssembly.instances['G1'].referencePoints[2], ))
mdb.models['Model-1'].Moment(cm3=5000.0, createStepName='Step-1', 
    distributionType=UNIFORM, field='', localCsys=None, name='Load-1', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-23'])
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(vr3=UNSET)
mdb.models['Model-1'].materials['Material-1'].density.setValues(table=((7800.0, 
    ), ))
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '24 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 21824, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 3270.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 429.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.7 D.O.F. 2 ratio = 2.57667E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.7 D.O.F. 2 ratio = 2.57667E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 2.5e-06, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.7 D.O.F. 2 ratio = 2.57667E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 6.25e-07, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.models['Model-1'].loads['Load-1'].setValues(cm3=5.0, distributionType=
    UNIFORM, field='')
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '24 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 27300, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 3270.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 429.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.7 D.O.F. 2 ratio = 2.57667E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.7 D.O.F. 2 ratio = 2.57667E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 2.5e-06, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.7 D.O.F. 2 ratio = 2.57667E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 6.25e-07, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.7 D.O.F. 2 ratio = 2.57667E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 1.5625e-07, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.7 D.O.F. 2 ratio = 2.57667E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 3.90625e-08, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(vr3=20.0)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '24 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 15820, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-2'].setValues(vr3=UNSET)
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 3270.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 429.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 1e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 2, 'stepTime': 2e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.5e-05, 'attempts': 1, 
    'timeIncrement': 1.5e-05, 'increment': 3, 'stepTime': 3.5e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5.75e-05, 'attempts': 1, 
    'timeIncrement': 2.25e-05, 'increment': 4, 'stepTime': 5.75e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 9.125e-05, 'attempts': 1, 
    'timeIncrement': 3.375e-05, 'increment': 5, 'stepTime': 9.125e-05, 
    'step': 1, 'jobName': 'Job-2', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.000141875, 'attempts': 1, 
    'timeIncrement': 5.0625e-05, 'increment': 6, 'stepTime': 0.000141875, 
    'step': 1, 'jobName': 'Job-2', 'severe': 2, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0002178125, 'attempts': 1, 
    'timeIncrement': 7.59375e-05, 'increment': 7, 'stepTime': 0.0002178125, 
    'step': 1, 'jobName': 'Job-2', 'severe': 2, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
#* Unable to start analysis job
#* Abaqus Error: Detected lock file Job-2.lck. Please confirm that no other 
#* applications are attempting to write to the output database associated with 
#* this job before removing the lock file and resubmitting.
#* Abaqus/Analysis exited with error(s).
#* 
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '24 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 25376, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 3270.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 429.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 6.98218E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 7.01431E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 1e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 5.84791E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 6.37206E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 2, 'stepTime': 2e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.08277E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.48915E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.5e-05, 'attempts': 1, 
    'timeIncrement': 1.5e-05, 'increment': 3, 'stepTime': 3.5e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.27573E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.26293E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5.75e-05, 'attempts': 1, 
    'timeIncrement': 2.25e-05, 'increment': 4, 'stepTime': 5.75e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.55849E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 9.125e-05, 'attempts': 1, 
    'timeIncrement': 3.375e-05, 'increment': 5, 'stepTime': 9.125e-05, 
    'step': 1, 'jobName': 'Job-2', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.000141875, 'attempts': 1, 
    'timeIncrement': 5.0625e-05, 'increment': 6, 'stepTime': 0.000141875, 
    'step': 1, 'jobName': 'Job-2', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0002178125, 'attempts': 1, 
    'timeIncrement': 7.59375e-05, 'increment': 7, 'stepTime': 0.0002178125, 
    'step': 1, 'jobName': 'Job-2', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00033171875, 'attempts': 1, 
    'timeIncrement': 0.00011390625, 'increment': 8, 'stepTime': 0.00033171875, 
    'step': 1, 'jobName': 'Job-2', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.000502578125, 'attempts': 1, 
    'timeIncrement': 0.000170859375, 'increment': 9, 
    'stepTime': 0.000502578125, 'step': 1, 'jobName': 'Job-2', 'severe': 3, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0007588671875, 
    'attempts': 1, 'timeIncrement': 0.0002562890625, 'increment': 10, 
    'stepTime': 0.0007588671875, 'step': 1, 'jobName': 'Job-2', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00114330078125, 
    'attempts': 1, 'timeIncrement': 0.00038443359375, 'increment': 11, 
    'stepTime': 0.00114330078125, 'step': 1, 'jobName': 'Job-2', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.001719951171875, 
    'attempts': 1, 'timeIncrement': 0.000576650390625, 'increment': 12, 
    'stepTime': 0.001719951171875, 'step': 1, 'jobName': 'Job-2', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0025849267578125, 
    'attempts': 1, 'timeIncrement': 0.0008649755859375, 'increment': 13, 
    'stepTime': 0.0025849267578125, 'step': 1, 'jobName': 'Job-2', 'severe': 4, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00388239013671875, 
    'attempts': 1, 'timeIncrement': 0.00129746337890625, 'increment': 14, 
    'stepTime': 0.00388239013671875, 'step': 1, 'jobName': 'Job-2', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
del mdb.models['Model-1'].loads['Load-1']
mdb.models['Model-1'].boundaryConditions['BC-2'].setValues(vr3=0.0)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '24 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 10476, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 3270.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 429.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 1e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 2, 'stepTime': 2e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.5e-05, 'attempts': 1, 
    'timeIncrement': 1.5e-05, 'increment': 3, 'stepTime': 3.5e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5.75e-05, 'attempts': 1, 
    'timeIncrement': 2.25e-05, 'increment': 4, 'stepTime': 5.75e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 9.125e-05, 'attempts': 1, 
    'timeIncrement': 3.375e-05, 'increment': 5, 'stepTime': 9.125e-05, 
    'step': 1, 'jobName': 'Job-2', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.000141875, 'attempts': 1, 
    'timeIncrement': 5.0625e-05, 'increment': 6, 'stepTime': 0.000141875, 
    'step': 1, 'jobName': 'Job-2', 'severe': 2, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0002178125, 'attempts': 1, 
    'timeIncrement': 7.59375e-05, 'increment': 7, 'stepTime': 0.0002178125, 
    'step': 1, 'jobName': 'Job-2', 'severe': 2, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00033171875, 'attempts': 1, 
    'timeIncrement': 0.00011390625, 'increment': 8, 'stepTime': 0.00033171875, 
    'step': 1, 'jobName': 'Job-2', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.000502578125, 'attempts': 1, 
    'timeIncrement': 0.000170859375, 'increment': 9, 
    'stepTime': 0.000502578125, 'step': 1, 'jobName': 'Job-2', 'severe': 1, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0007588671875, 
    'attempts': 1, 'timeIncrement': 0.0002562890625, 'increment': 10, 
    'stepTime': 0.0007588671875, 'step': 1, 'jobName': 'Job-2', 'severe': 1, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00114330078125, 
    'attempts': 1, 'timeIncrement': 0.00038443359375, 'increment': 11, 
    'stepTime': 0.00114330078125, 'step': 1, 'jobName': 'Job-2', 'severe': 3, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 237 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12071 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12071 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12071 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27740 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27740 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27740 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74747 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74747 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74747 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59078 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59078 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59078 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74981 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74981 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74981 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59312 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59312 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59312 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43409 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43409 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43409 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43643 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43643 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43643 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.75269 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.75269 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.75269 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59600 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59600 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59600 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43931 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43931 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43931 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43826 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43826 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43826 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.75161 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.75161 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.75161 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43823 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43823 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43823 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59492 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59492 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59492 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12297 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12297 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12297 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12593 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12593 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12593 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12485 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12485 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12485 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12488 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12488 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12488 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12394 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12394 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12394 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12081 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12081 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12081 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.28262 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.28262 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.28262 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12187 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12187 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12187 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12305 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12305 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12305 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27974 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27974 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27974 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.28154 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.28154 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.28154 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.28157 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.28157 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.28157 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12318 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12318 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12318 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12296 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12296 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12296 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74994 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74994 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74994 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59325 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59325 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59325 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43656 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43656 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43656 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27987 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27987 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27987 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27965 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27965 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27965 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11680 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11680 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11680 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27349 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27349 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27349 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11827 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11827 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11827 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27496 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27496 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27496 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27355 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27355 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27355 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11686 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11686 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11686 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74356 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74356 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74356 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.58687 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.58687 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.58687 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74503 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74503 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74503 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.58834 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.58834 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.58834 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74759 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74759 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74759 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59090 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59090 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59090 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74362 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74362 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74362 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.58693 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.58693 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.58693 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43018 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43018 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43018 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43024 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43024 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43024 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43165 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43165 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43165 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27752 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27752 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27752 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12083 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12083 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12083 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43421 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43421 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43421 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43634 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43634 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43634 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59303 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59303 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59303 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74972 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74972 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74972 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74973 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74973 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74973 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74757 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74757 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74757 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.75096 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.75096 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.75096 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74494 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74494 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74494 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74642 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74642 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74642 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74873 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74873 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74873 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.75164 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.75164 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.75164 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11818 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11818 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11818 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11966 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00114330078125, 
    'attempts': ' 1U', 'timeIncrement': 0.000576650390625, 'increment': 12, 
    'stepTime': 0.00114330078125, 'step': 1, 'jobName': 'Job-2', 'severe': 2, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00114330078125, 
    'attempts': ' 2U', 'timeIncrement': 0.00014416259765625, 'increment': 12, 
    'stepTime': 0.00114330078125, 'step': 1, 'jobName': 'Job-2', 'severe': 2, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00114330078125, 
    'attempts': ' 3U', 'timeIncrement': 3.60406494140625e-05, 'increment': 12, 
    'stepTime': 0.00114330078125, 'step': 1, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00114330078125, 
    'attempts': ' 4U', 'timeIncrement': 9.01016235351563e-06, 'increment': 12, 
    'stepTime': 0.00114330078125, 'step': 1, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00114330078125, 
    'attempts': ' 5U', 'timeIncrement': 2.25254058837891e-06, 'increment': 12, 
    'stepTime': 0.00114330078125, 'step': 1, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-2'].setValues(vr3=UNSET)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '24 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 11660, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 3270.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 429.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 6.98218E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 7.01431E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 1e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 5.84791E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 6.37206E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 2, 'stepTime': 2e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.08277E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.48915E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.5e-05, 'attempts': 1, 
    'timeIncrement': 1.5e-05, 'increment': 3, 'stepTime': 3.5e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.27573E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.26293E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5.75e-05, 'attempts': 1, 
    'timeIncrement': 2.25e-05, 'increment': 4, 'stepTime': 5.75e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 4.55849E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 9.125e-05, 'attempts': 1, 
    'timeIncrement': 3.375e-05, 'increment': 5, 'stepTime': 9.125e-05, 
    'step': 1, 'jobName': 'Job-2', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.000141875, 'attempts': 1, 
    'timeIncrement': 5.0625e-05, 'increment': 6, 'stepTime': 0.000141875, 
    'step': 1, 'jobName': 'Job-2', 'severe': 4, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0002178125, 'attempts': 1, 
    'timeIncrement': 7.59375e-05, 'increment': 7, 'stepTime': 0.0002178125, 
    'step': 1, 'jobName': 'Job-2', 'severe': 2, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00033171875, 'attempts': 1, 
    'timeIncrement': 0.00011390625, 'increment': 8, 'stepTime': 0.00033171875, 
    'step': 1, 'jobName': 'Job-2', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.000502578125, 'attempts': 1, 
    'timeIncrement': 0.000170859375, 'increment': 9, 
    'stepTime': 0.000502578125, 'step': 1, 'jobName': 'Job-2', 'severe': 3, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0007588671875, 
    'attempts': 1, 'timeIncrement': 0.0002562890625, 'increment': 10, 
    'stepTime': 0.0007588671875, 'step': 1, 'jobName': 'Job-2', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00114330078125, 
    'attempts': 1, 'timeIncrement': 0.00038443359375, 'increment': 11, 
    'stepTime': 0.00114330078125, 'step': 1, 'jobName': 'Job-2', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.001719951171875, 
    'attempts': 1, 'timeIncrement': 0.000576650390625, 'increment': 12, 
    'stepTime': 0.001719951171875, 'step': 1, 'jobName': 'Job-2', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0025849267578125, 
    'attempts': 1, 'timeIncrement': 0.0008649755859375, 'increment': 13, 
    'stepTime': 0.0025849267578125, 'step': 1, 'jobName': 'Job-2', 'severe': 3, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00388239013671875, 
    'attempts': 1, 'timeIncrement': 0.00129746337890625, 'increment': 14, 
    'stepTime': 0.00388239013671875, 'step': 1, 'jobName': 'Job-2', 
    'severe': 4, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-1'].setValues(initialInc=1.0, maxNumInc=100, 
    minInc=1e-05)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '24 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 9292, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 3270.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 429.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 6.98218E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 6.98218E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 6.98218E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 6.98218E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 856 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 487 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.275 D.O.F. 2 ratio = 2.33010E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 116 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 247 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
# Save by Ricardo Fitas on 2022_01_04-18.17.09; build 2021 2020_03_06-14.50.37 167380
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].historyOutputRequests['H-Output-1'].setValues(variables=(
    'CSTRESS', 'CDISP', 'CFNM', 'CFN1', 'CFN2', 'CFN3', 'CFSM', 'CFS1', 'CFS2', 
    'CFS3', 'CFTM', 'CFT1', 'CFT2', 'CFT3', 'CMNM', 'CMN1', 'CMN2', 'CMN3', 
    'CMSM', 'CMS1', 'CMS2', 'CMS3', 'CMTM', 'CMT1', 'CMT2', 'CMT3', 'ALLAE', 
    'ALLCD', 'ALLDMD', 'ALLEE', 'ALLFD', 'ALLIE', 'ALLJD', 'ALLKE', 'ALLKL', 
    'ALLPD', 'ALLQB', 'ALLSE', 'ALLSD', 'ALLVD', 'ALLWK', 'ETOTAL'))
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-1'].setValues(initialInc=0.01)
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '24 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': "The number of history output requests (100001) in this analysis step has exceeded 10x the maximum value of 10000 specified by the Abaqus environment variable 'max_history_requests.' Reduce the number of requests, increase the value of this variable, or deactivate this test by setting 'max_history_requests=0' in the abaqus_v6.env file. Significant performance problems may occur if these requests are maintained.", 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].historyOutputRequests['H-Output-1'].setValues(variables=(
    'CSTRESS', 'CDISP', 'CFTM', 'CFT1', 'CFT2', 'CFT3', 'CMTM', 'CMT1', 'CMT2', 
    'CMT3', 'ALLAE', 'ALLCD', 'ALLDMD', 'ALLEE', 'ALLFD', 'ALLIE', 'ALLJD', 
    'ALLKE', 'ALLKL', 'ALLPD', 'ALLQB', 'ALLSE', 'ALLSD', 'ALLVD', 'ALLWK', 
    'ETOTAL'))
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '24 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': "The number of history output requests (100001) in this analysis step has exceeded 10x the maximum value of 10000 specified by the Abaqus environment variable 'max_history_requests.' Reduce the number of requests, increase the value of this variable, or deactivate this test by setting 'max_history_requests=0' in the abaqus_v6.env file. Significant performance problems may occur if these requests are maintained.", 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].historyOutputRequests['H-Output-1'].setValues(variables=(
    'CSTRESS', 'CDISP', 'ALLAE', 'ALLCD', 'ALLDMD', 'ALLEE', 'ALLFD', 'ALLIE', 
    'ALLJD', 'ALLKE', 'ALLKL', 'ALLPD', 'ALLQB', 'ALLSE', 'ALLSD', 'ALLVD', 
    'ALLWK', 'ETOTAL'))
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.models['Model-1'].historyOutputRequests['H-Output-1'].setValues(variables=(
    'CSTRESS', 'CDISP'))
mdb.jobs['Job-2']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
#* Unable to start analysis job
#* Abaqus Error: Detected lock file Job-2.lck. Please confirm that no other 
#* applications are attempting to write to the output database associated with 
#* this job before removing the lock file and resubmitting.
#* Abaqus/Analysis exited with error(s).
#* 
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '24 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': "The number of history output requests (100001) in this analysis step has exceeded 10x the maximum value of 10000 specified by the Abaqus environment variable 'max_history_requests.' Reduce the number of requests, increase the value of this variable, or deactivate this test by setting 'max_history_requests=0' in the abaqus_v6.env file. Significant performance problems may occur if these requests are maintained.", 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].historyOutputRequests['H-Output-1'].setValues(variables=(
    'CSTRESS', 'CDISP'))
mdb.models['Model-1'].historyOutputRequests['H-Output-1'].setValues(variables=
    PRESELECT)
mdb.models['Model-1'].fieldOutputRequests['F-Output-1'].setValues(variables=
    PRESELECT)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '24 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 22072, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 3270.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 429.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.124 D.O.F. 2 ratio = 6.98218E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 633 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 4 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 0.01, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.267 D.O.F. 2 ratio = 1.40472E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 60 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 30 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.0025, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.267 D.O.F. 2 ratio = 2.35070E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 18 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 40 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.000625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.267 D.O.F. 2 ratio = 2.35070E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00015625, 'attempts': 4, 
    'timeIncrement': 0.00015625, 'increment': 1, 'stepTime': 0.00015625, 
    'step': 1, 'jobName': 'Job-2', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0003125, 'attempts': 1, 
    'timeIncrement': 0.00015625, 'increment': 2, 'stepTime': 0.0003125, 
    'step': 1, 'jobName': 'Job-2', 'severe': 6, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.267 D.O.F. 2 ratio = 4.66596E+09.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.000546875, 'attempts': 1, 
    'timeIncrement': 0.000234375, 'increment': 3, 'stepTime': 0.000546875, 
    'step': 1, 'jobName': 'Job-2', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0008984375, 'attempts': 1, 
    'timeIncrement': 0.0003515625, 'increment': 4, 'stepTime': 0.0008984375, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00142578125, 'attempts': 1, 
    'timeIncrement': 0.00052734375, 'increment': 5, 'stepTime': 0.00142578125, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.002216796875, 'attempts': 1, 
    'timeIncrement': 0.000791015625, 'increment': 6, 
    'stepTime': 0.002216796875, 'step': 1, 'jobName': 'Job-2', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0034033203125, 
    'attempts': 1, 'timeIncrement': 0.0011865234375, 'increment': 7, 
    'stepTime': 0.0034033203125, 'step': 1, 'jobName': 'Job-2', 'severe': 4, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00518310546875, 
    'attempts': 1, 'timeIncrement': 0.00177978515625, 'increment': 8, 
    'stepTime': 0.00518310546875, 'step': 1, 'jobName': 'Job-2', 'severe': 4, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.007852783203125, 
    'attempts': 1, 'timeIncrement': 0.002669677734375, 'increment': 9, 
    'stepTime': 0.007852783203125, 'step': 1, 'jobName': 'Job-2', 'severe': 4, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0118572998046875, 
    'attempts': 1, 'timeIncrement': 0.0040045166015625, 'increment': 10, 
    'stepTime': 0.0118572998046875, 'step': 1, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.267 D.O.F. 2 ratio = 26.0388E+09 .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.01586181640625, 
    'attempts': 1, 'timeIncrement': 0.0040045166015625, 'increment': 11, 
    'stepTime': 0.01586181640625, 'step': 1, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0198663330078125, 
    'attempts': 1, 'timeIncrement': 0.0040045166015625, 'increment': 12, 
    'stepTime': 0.0198663330078125, 'step': 1, 'jobName': 'Job-2', 'severe': 7, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.023870849609375, 
    'attempts': 1, 'timeIncrement': 0.0040045166015625, 'increment': 13, 
    'stepTime': 0.023870849609375, 'step': 1, 'jobName': 'Job-2', 'severe': 5, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.267 D.O.F. 2 ratio = 18.4224E+09 .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0298776245117188, 
    'attempts': 1, 'timeIncrement': 0.00600677490234375, 'increment': 14, 
    'stepTime': 0.0298776245117188, 'step': 1, 'jobName': 'Job-2', 'severe': 4, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0388877868652344, 
    'attempts': 1, 'timeIncrement': 0.00901016235351563, 'increment': 15, 
    'stepTime': 0.0388877868652344, 'step': 1, 'jobName': 'Job-2', 
    'severe': 11, 'iterations': 12, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 169 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 42 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0388877868652344, 
    'attempts': ' 1U', 'timeIncrement': 0.0135152435302734, 'increment': 16, 
    'stepTime': 0.0388877868652344, 'step': 1, 'jobName': 'Job-2', 'severe': 1, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 6 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0422665977478027, 
    'attempts': 2, 'timeIncrement': 0.00337881088256836, 'increment': 16, 
    'stepTime': 0.0422665977478027, 'step': 1, 'jobName': 'Job-2', 
    'severe': 10, 'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 209 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.15398 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.15398 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.15398 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.31067 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.31067 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.31067 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.10784 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.10784 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.10784 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26453 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26453 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26453 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.15272 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.15272 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.15272 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.30941 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.30941 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.30941 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26642 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26642 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26642 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.10973 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.10973 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.10973 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11472 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11472 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11472 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11630 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11630 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11630 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27141 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27141 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27141 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27299 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27299 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27299 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26980 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26980 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26980 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11145 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11145 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11145 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11311 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11311 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11311 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26814 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26814 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26814 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11770 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11770 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11770 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27439 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27439 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27439 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12146 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12146 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12146 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27815 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27815 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27815 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27692 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27692 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27692 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12023 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12023 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12023 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11628 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11628 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11628 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27297 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27297 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27297 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26978 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26978 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26978 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11144 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11144 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11144 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11309 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11309 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11309 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11470 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11470 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11470 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26813 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26813 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.26813 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27139 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27139 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27139 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12456 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12456 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12456 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.28125 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.28125 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.28125 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.75132 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.75132 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.75132 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59463 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59463 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59463 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43794 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43794 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43794 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12354 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12354 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12354 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.28023 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.28023 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.28023 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43692 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43692 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43692 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74819 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74819 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.74819 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.75030 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.75030 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.75030 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59361 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59361 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59361 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59150 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59150 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.59150 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43481 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43481 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.43481 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12035 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12035 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12035 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27812 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27812 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27812 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12143 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12143 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12143 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27704 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27704 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27704 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12257 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12257 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12257 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27926 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27926 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27926 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12033 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12033 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12033 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27702 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27702 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27702 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27923 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27923 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27923 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12147 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12147 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12147 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12254 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12254 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.12254 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27816 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27816 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27816 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27814 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27814 D.O.F. 2.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.27814 D.O.F. 3.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Zero pivot when processing node G2.11772 D.O.F. 1.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0422665977478027, 
    'attempts': ' 1U', 'timeIncrement': 0.00506821632385254, 'increment': 17, 
    'stepTime': 0.0422665977478027, 'step': 1, 'jobName': 'Job-2', 'severe': 3, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0435336518287659, 
    'attempts': 2, 'timeIncrement': 0.00126705408096313, 'increment': 17, 
    'stepTime': 0.0435336518287659, 'step': 1, 'jobName': 'Job-2', 'severe': 5, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0454342329502106, 
    'attempts': 1, 'timeIncrement': 0.0019005811214447, 'increment': 18, 
    'stepTime': 0.0454342329502106, 'step': 1, 'jobName': 'Job-2', 'severe': 3, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0482851046323776, 
    'attempts': 1, 'timeIncrement': 0.00285087168216705, 'increment': 19, 
    'stepTime': 0.0482851046323776, 'step': 1, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0511359763145447, 
    'attempts': 1, 'timeIncrement': 0.00285087168216705, 'increment': 20, 
    'stepTime': 0.0511359763145447, 'step': 1, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0539868479967118, 
    'attempts': 1, 'timeIncrement': 0.00285087168216705, 'increment': 21, 
    'stepTime': 0.0539868479967118, 'step': 1, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #400000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #810 ]', ), ), number=1)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:12 #c7100000 #1c71 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:4 #71000000 #1c #0:3 #3186 ]', ), ), size=4e-05)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'The aspect ratio for 42037 elements exceeds 100 to 1. The elements have been identified in element set WarnElemAspectRatio.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 19736, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 2117.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 456.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.147 D.O.F. 2 ratio = 5.56547E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1347 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 0.01, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.279 D.O.F. 2 ratio = 8.53306E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 216 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 358 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.0025, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 119.474E+12  .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 121 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 311 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.000625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 119.474E+12  .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.00015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 119.474E+12  .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 91.1157E+12 .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.90625e-05, 'attempts': 5, 
    'timeIncrement': 3.90625e-05, 'increment': 1, 'stepTime': 3.90625e-05, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 282.218E+12  .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.90625e-05, 
    'attempts': ' 1U', 'timeIncrement': 3.90625e-05, 'increment': 2, 
    'stepTime': 3.90625e-05, 'step': 1, 'jobName': 'Job-2', 'severe': 3, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 28.0668E+12 .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 20.4322E+12 .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 4.90625e-05, 'attempts': 2, 
    'timeIncrement': 1e-05, 'increment': 2, 'stepTime': 4.90625e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 14.2643E+12 .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 24.9307E+12 .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 6.40625e-05, 'attempts': 1, 
    'timeIncrement': 1.5e-05, 'increment': 3, 'stepTime': 6.40625e-05, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 94.5898E+12 .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 3 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 6.40625e-05, 
    'attempts': ' 1U', 'timeIncrement': 2.25e-05, 'increment': 4, 
    'stepTime': 6.40625e-05, 'step': 1, 'jobName': 'Job-2', 'severe': 4, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 28.8671E+12 .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 7.40625e-05, 'attempts': 2, 
    'timeIncrement': 1e-05, 'increment': 4, 'stepTime': 7.40625e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 20 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 91 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 7.40625e-05, 
    'attempts': ' 1U', 'timeIncrement': 1.5e-05, 'increment': 5, 
    'stepTime': 7.40625e-05, 'step': 1, 'jobName': 'Job-2', 'severe': 3, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 6.96208E+09.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 8.40625e-05, 'attempts': 2, 
    'timeIncrement': 1e-05, 'increment': 5, 'stepTime': 8.40625e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 5, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 9.90625e-05, 'attempts': 1, 
    'timeIncrement': 1.5e-05, 'increment': 6, 'stepTime': 9.90625e-05, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0001215625, 'attempts': 1, 
    'timeIncrement': 2.25e-05, 'increment': 7, 'stepTime': 0.0001215625, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0001553125, 'attempts': 1, 
    'timeIncrement': 3.375e-05, 'increment': 8, 'stepTime': 0.0001553125, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 6.85459E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0002059375, 'attempts': 1, 
    'timeIncrement': 5.0625e-05, 'increment': 9, 'stepTime': 0.0002059375, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 2.59203E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.000281875, 'attempts': 1, 
    'timeIncrement': 7.59375e-05, 'increment': 10, 'stepTime': 0.000281875, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 399.486E+09  .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00039578125, 'attempts': 1, 
    'timeIncrement': 0.00011390625, 'increment': 11, 'stepTime': 0.00039578125, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 71.0806E+09 .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.000566640625, 'attempts': 1, 
    'timeIncrement': 0.000170859375, 'increment': 12, 
    'stepTime': 0.000566640625, 'step': 1, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 13.9127E+09 .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0008229296875, 
    'attempts': 1, 'timeIncrement': 0.0002562890625, 'increment': 13, 
    'stepTime': 0.0008229296875, 'step': 1, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00120736328125, 
    'attempts': 1, 'timeIncrement': 0.00038443359375, 'increment': 14, 
    'stepTime': 0.00120736328125, 'step': 1, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 30 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00120736328125, 
    'attempts': ' 1U', 'timeIncrement': 0.000576650390625, 'increment': 15, 
    'stepTime': 0.00120736328125, 'step': 1, 'jobName': 'Job-2', 'severe': 4, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 25.5071E+09 .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00135152587890625, 
    'attempts': 2, 'timeIncrement': 0.00014416259765625, 'increment': 15, 
    'stepTime': 0.00135152587890625, 'step': 1, 'jobName': 'Job-2', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00135152587890625, 
    'attempts': ' 1U', 'timeIncrement': 0.000216243896484375, 'increment': 16, 
    'stepTime': 0.00135152587890625, 'step': 1, 'jobName': 'Job-2', 
    'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00140558685302734, 
    'attempts': 2, 'timeIncrement': 5.40609741210938e-05, 'increment': 16, 
    'stepTime': 0.00140558685302734, 'step': 1, 'jobName': 'Job-2', 
    'severe': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 17.4342E+09 .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00148667831420898, 
    'attempts': 1, 'timeIncrement': 8.10914611816407e-05, 'increment': 17, 
    'stepTime': 0.00148667831420898, 'step': 1, 'jobName': 'Job-2', 
    'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 257.143E+09  .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00160831550598145, 
    'attempts': 1, 'timeIncrement': 0.000121637191772461, 'increment': 18, 
    'stepTime': 0.00160831550598145, 'step': 1, 'jobName': 'Job-2', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 49.9898E+09 .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00179077129364014, 
    'attempts': 1, 'timeIncrement': 0.000182455787658691, 'increment': 19, 
    'stepTime': 0.00179077129364014, 'step': 1, 'jobName': 'Job-2', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 9.72726E+09.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00206445497512817, 
    'attempts': 1, 'timeIncrement': 0.000273683681488037, 'increment': 20, 
    'stepTime': 0.00206445497512817, 'step': 1, 'jobName': 'Job-2', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00247498049736023, 
    'attempts': 1, 'timeIncrement': 0.000410525522232056, 'increment': 21, 
    'stepTime': 0.00247498049736023, 'step': 1, 'jobName': 'Job-2', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00309076878070831, 
    'attempts': 1, 'timeIncrement': 0.000615788283348084, 'increment': 22, 
    'stepTime': 0.00309076878070831, 'step': 1, 'jobName': 'Job-2', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00401445120573044, 
    'attempts': 1, 'timeIncrement': 0.000923682425022125, 'increment': 23, 
    'stepTime': 0.00401445120573044, 'step': 1, 'jobName': 'Job-2', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.284 D.O.F. 2 ratio = 321.540E+09  .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffffff:20 #1fff ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:14 #7f ]', ), ), size=0.004)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffffff:20 #1fff ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:14 #7f ]', ), ), size=0.0005)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #4000000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #20 ]', ), ), number=4)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:4 #c00000 #0:4 #c000 #0:4 #40 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:6 #3000000 #0:6 #c0000 #0:6 #1000 ]', ), ), size=0.004)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.models['Model-1'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ), ))
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '12 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 30840, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 10215.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 1359.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.6 D.O.F. 2 ratio = 3.25631E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 97 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 13 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 0.01, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.95 D.O.F. 2 ratio = 129.137E+09  .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 4 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.0025, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G2.95 D.O.F. 2 ratio = 129.137E+09  .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-2'].setValues(vr3=0.0)
mdb.models['Model-1'].rootAssembly.Set(name='Set-31', referencePoints=(
    mdb.models['Model-1'].rootAssembly.instances['G1'].referencePoints[2], ))
mdb.models['Model-1'].Moment(cm3=20000.0, createStepName='Step-1', 
    distributionType=UNIFORM, field='', localCsys=None, name='Load-1', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-31'])
mdb.models['Model-1'].boundaryConditions['BC-1'].setValues(vr3=UNSET)
mdb.models['Model-1'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    kinematicSplit=AVERAGE_STRAIN, hourglassControl=DEFAULT, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ), ))
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 23104, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1399.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 0.01, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.0025, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.000625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.00015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 3.90625e-05, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-1'].setValues(initialInc=0.001, maxNumInc=
    1000, minInc=1e-06)
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].loads['Load-1'].setValues(cm3=200.0, distributionType=
    UNIFORM, field='')
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 9280, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1399.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 0.001, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.00025, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 6.25e-05, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 1.5625e-05, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 3.90625e-06, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2'})
mdb.models['Model-1'].loads['Load-1'].setValues(cm3=5.0, distributionType=
    UNIFORM, field='')
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
#* Unable to start analysis job
#* Abaqus Error: Detected lock file Job-2.lck. Please confirm that no other 
#* applications are attempting to write to the output database associated with 
#* this job before removing the lock file and resubmitting.
#* Abaqus/Analysis exited with error(s).
#* 
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
#* Unable to start analysis job
#* Abaqus Error: Detected lock file Job-2.lck. Please confirm that no other 
#* applications are attempting to write to the output database associated with 
#* this job before removing the lock file and resubmitting.
#* Abaqus/Analysis exited with error(s).
#* 
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 34144, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1399.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 0.001, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.00025, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 6.25e-05, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 1.5625e-05, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 3.90625e-06, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].loads['Load-1'].setValues(cm3=0.05, distributionType=
    UNIFORM, field='')
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 25920, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1399.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 0.001, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.00025, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 6.25e-05, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
del mdb.models['Model-1'].loads['Load-1']
mdb.models['Model-1'].rootAssembly.Set(name='Set-33', referencePoints=(
    mdb.models['Model-1'].rootAssembly.instances['G1'].referencePoints[2], ))
mdb.models['Model-1'].Moment(cm3=50000.0, createStepName='Step-1', 
    distributionType=UNIFORM, field='', localCsys=None, name='Load-1', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-33'])
del mdb.models['Model-1'].boundaryConditions['BC-1']
mdb.models['Model-1'].rootAssembly.Set(name='Set-34', referencePoints=(
    mdb.models['Model-1'].rootAssembly.instances['G1'].referencePoints[2], ))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-3', region=mdb.models['Model-1'].rootAssembly.sets['Set-34'], u1=0.0, 
    u2=0.0, u3=0.0, ur1=0.0, ur2=0.0, ur3=UNSET)
del mdb.models['Model-1'].boundaryConditions['BC-2']
mdb.models['Model-1'].rootAssembly.Set(name='Set-35', referencePoints=(
    mdb.models['Model-1'].rootAssembly.instances['G2'].referencePoints[2], ))
mdb.models['Model-1'].EncastreBC(createStepName='Step-1', localCsys=None, name=
    'BC-2', region=mdb.models['Model-1'].rootAssembly.sets['Set-35'])
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 3516, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1399.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 0.001, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.00025, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 6.25e-05, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 1.5625e-05, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 3.90625e-06, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
del mdb.models['Model-1'].loads['Load-1']
mdb.models['Model-1'].rootAssembly.Set(name='Set-36', referencePoints=(
    mdb.models['Model-1'].rootAssembly.instances['G1'].referencePoints[2], ))
mdb.models['Model-1'].Moment(cm3=40000.0, createStepName='Step-1', 
    distributionType=UNIFORM, field='', localCsys=None, name='Load-1', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-36'])
mdb.models['Model-1'].rootAssembly.Set(name='Set-37', referencePoints=(
    mdb.models['Model-1'].rootAssembly.instances['G1'].referencePoints[2], ))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-4', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-37'], u1=SET, u2=SET, 
    u3=SET, ur1=SET, ur2=SET, ur3=UNSET)
mdb.models['Model-1'].rootAssembly.Set(name='Set-38', referencePoints=(
    mdb.models['Model-1'].rootAssembly.instances['G2'].referencePoints[2], ))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Initial', 
    distributionType=UNIFORM, fieldName='', localCsys=None, name='BC-5', 
    region=mdb.models['Model-1'].rootAssembly.sets['Set-38'], u1=SET, u2=SET, 
    u3=SET, ur1=SET, ur2=SET, ur3=SET)
del mdb.models['Model-1'].boundaryConditions['BC-2']
del mdb.models['Model-1'].boundaryConditions['BC-3']
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 17264, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1399.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 0.001, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.00025, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 6.25e-05, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 1.5625e-05, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 3.90625e-06, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].rootAssembly.Set(cells=
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    ('[#1 ]', ), ), name='Set-39')
mdb.models['Model-1'].RotationalBodyForce(centrifugal=ON, createStepName=
    'Step-1', magnitude=20.0, name='Load-2', point1=(0.0, 0.0, 0.0), point2=(
    0.0, 0.0, 1.0), region=mdb.models['Model-1'].rootAssembly.sets['Set-39'], 
    rotaryAcceleration=OFF)
del mdb.models['Model-1'].loads['Load-1']
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 31304, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1399.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.001, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 1, 'stepTime': 0.001, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.002, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 2, 'stepTime': 0.002, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0035, 'attempts': 1, 
    'timeIncrement': 0.0015, 'increment': 3, 'stepTime': 0.0035, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00575, 'attempts': 1, 
    'timeIncrement': 0.00225, 'increment': 4, 'stepTime': 0.00575, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.009125, 'attempts': 1, 
    'timeIncrement': 0.003375, 'increment': 5, 'stepTime': 0.009125, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0141875, 'attempts': 1, 
    'timeIncrement': 0.0050625, 'increment': 6, 'stepTime': 0.0141875, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.02178125, 'attempts': 1, 
    'timeIncrement': 0.00759375, 'increment': 7, 'stepTime': 0.02178125, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.033171875, 'attempts': 1, 
    'timeIncrement': 0.011390625, 'increment': 8, 'stepTime': 0.033171875, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0502578125, 'attempts': 1, 
    'timeIncrement': 0.0170859375, 'increment': 9, 'stepTime': 0.0502578125, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.07588671875, 'attempts': 1, 
    'timeIncrement': 0.02562890625, 'increment': 10, 'stepTime': 0.07588671875, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.114330078125, 'attempts': 1, 
    'timeIncrement': 0.038443359375, 'increment': 11, 
    'stepTime': 0.114330078125, 'step': 1, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.1719951171875, 
    'attempts': 1, 'timeIncrement': 0.0576650390625, 'increment': 12, 
    'stepTime': 0.1719951171875, 'step': 1, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.25849267578125, 
    'attempts': 1, 'timeIncrement': 0.08649755859375, 'increment': 13, 
    'stepTime': 0.25849267578125, 'step': 1, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
del mdb.models['Model-1'].loads['Load-2']
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-1', ur3=20.0)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 31104, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1399.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 18 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 13 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 29 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 0.001, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00025, 'attempts': 2, 
    'timeIncrement': 0.00025, 'increment': 1, 'stepTime': 0.00025, 'step': 1, 
    'jobName': 'Job-2', 'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0005, 'attempts': 1, 
    'timeIncrement': 0.00025, 'increment': 2, 'stepTime': 0.0005, 'step': 1, 
    'jobName': 'Job-2', 'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.000875, 'attempts': 1, 
    'timeIncrement': 0.000375, 'increment': 3, 'stepTime': 0.000875, 'step': 1, 
    'jobName': 'Job-2', 'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0014375, 'attempts': 1, 
    'timeIncrement': 0.0005625, 'increment': 4, 'stepTime': 0.0014375, 
    'step': 1, 'jobName': 'Job-2', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-1'].setValues(initialInc=1e-05)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 14368, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1399.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 1e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 2, 'stepTime': 2e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.5e-05, 'attempts': 1, 
    'timeIncrement': 1.5e-05, 'increment': 3, 'stepTime': 3.5e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5.75e-05, 'attempts': 1, 
    'timeIncrement': 2.25e-05, 'increment': 4, 'stepTime': 5.75e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 9.125e-05, 'attempts': 1, 
    'timeIncrement': 3.375e-05, 'increment': 5, 'stepTime': 9.125e-05, 
    'step': 1, 'jobName': 'Job-2', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.000141875, 'attempts': 1, 
    'timeIncrement': 5.0625e-05, 'increment': 6, 'stepTime': 0.000141875, 
    'step': 1, 'jobName': 'Job-2', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0002178125, 'attempts': 1, 
    'timeIncrement': 7.59375e-05, 'increment': 7, 'stepTime': 0.0002178125, 
    'step': 1, 'jobName': 'Job-2', 'severe': 2, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00033171875, 'attempts': 1, 
    'timeIncrement': 0.00011390625, 'increment': 8, 'stepTime': 0.00033171875, 
    'step': 1, 'jobName': 'Job-2', 'severe': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.000502578125, 'attempts': 1, 
    'timeIncrement': 0.000170859375, 'increment': 9, 
    'stepTime': 0.000502578125, 'step': 1, 'jobName': 'Job-2', 'severe': 1, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0007588671875, 
    'attempts': 1, 'timeIncrement': 0.0002562890625, 'increment': 10, 
    'stepTime': 0.0007588671875, 'step': 1, 'jobName': 'Job-2', 'severe': 1, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00114330078125, 
    'attempts': 1, 'timeIncrement': 0.00038443359375, 'increment': 11, 
    'stepTime': 0.00114330078125, 'step': 1, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00114330078125, 
    'attempts': ' 1U', 'timeIncrement': 0.000576650390625, 'increment': 12, 
    'stepTime': 0.00114330078125, 'step': 1, 'jobName': 'Job-2', 'severe': 5, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00128746337890625, 
    'attempts': 2, 'timeIncrement': 0.00014416259765625, 'increment': 12, 
    'stepTime': 0.00128746337890625, 'step': 1, 'jobName': 'Job-2', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00150370727539063, 
    'attempts': 1, 'timeIncrement': 0.000216243896484375, 'increment': 13, 
    'stepTime': 0.00150370727539063, 'step': 1, 'jobName': 'Job-2', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00150370727539063, 
    'attempts': ' 1U', 'timeIncrement': 0.000324365844726563, 'increment': 14, 
    'stepTime': 0.00150370727539063, 'step': 1, 'jobName': 'Job-2', 
    'severe': 5, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00158479873657227, 
    'attempts': 2, 'timeIncrement': 8.10914611816407e-05, 'increment': 14, 
    'stepTime': 0.00158479873657227, 'step': 1, 'jobName': 'Job-2', 
    'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00170643592834473, 
    'attempts': 1, 'timeIncrement': 0.000121637191772461, 'increment': 15, 
    'stepTime': 0.00170643592834473, 'step': 1, 'jobName': 'Job-2', 
    'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00188889171600342, 
    'attempts': 1, 'timeIncrement': 0.000182455787658691, 'increment': 16, 
    'stepTime': 0.00188889171600342, 'step': 1, 'jobName': 'Job-2', 
    'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00216257539749146, 
    'attempts': 1, 'timeIncrement': 0.000273683681488037, 'increment': 17, 
    'stepTime': 0.00216257539749146, 'step': 1, 'jobName': 'Job-2', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00257310091972351, 
    'attempts': 1, 'timeIncrement': 0.000410525522232056, 'increment': 18, 
    'stepTime': 0.00257310091972351, 'step': 1, 'jobName': 'Job-2', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0031888892030716, 
    'attempts': 1, 'timeIncrement': 0.000615788283348084, 'increment': 19, 
    'stepTime': 0.0031888892030716, 'step': 1, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00380467748641968, 
    'attempts': 1, 'timeIncrement': 0.000615788283348084, 'increment': 20, 
    'stepTime': 0.00380467748641968, 'step': 1, 'jobName': 'Job-2', 
    'severe': 0, 'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00380467748641968, 
    'attempts': ' 1U', 'timeIncrement': 0.000615788283348084, 'increment': 21, 
    'stepTime': 0.00380467748641968, 'step': 1, 'jobName': 'Job-2', 
    'severe': 0, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00380467748641968, 
    'attempts': ' 2U', 'timeIncrement': 0.000153947070837021, 'increment': 21, 
    'stepTime': 0.00380467748641968, 'step': 1, 'jobName': 'Job-2', 
    'severe': 0, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00380467748641968, 
    'attempts': ' 3U', 'timeIncrement': 7.69735354185105e-05, 'increment': 21, 
    'stepTime': 0.00380467748641968, 'step': 1, 'jobName': 'Job-2', 
    'severe': 0, 'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00380467748641968, 
    'attempts': ' 4U', 'timeIncrement': 1.92433838546276e-05, 'increment': 21, 
    'stepTime': 0.00380467748641968, 'step': 1, 'jobName': 'Job-2', 
    'severe': 0, 'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00380948833238334, 
    'attempts': 5, 'timeIncrement': 4.8108459636569e-06, 'increment': 21, 
    'stepTime': 0.00380948833238334, 'step': 1, 'jobName': 'Job-2', 
    'severe': 1, 'iterations': 21, 'phase': STANDARD_PHASE, 'equilibrium': 20})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00380948833238334, 
    'attempts': ' 1U', 'timeIncrement': 4.8108459636569e-06, 'increment': 22, 
    'stepTime': 0.00380948833238334, 'step': 1, 'jobName': 'Job-2', 
    'severe': 2, 'iterations': 23, 'phase': STANDARD_PHASE, 'equilibrium': 21})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00381069104387425, 
    'attempts': 2, 'timeIncrement': 1.20271149091423e-06, 'increment': 22, 
    'stepTime': 0.00381069104387425, 'step': 1, 'jobName': 'Job-2', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00381069104387425, 
    'attempts': ' 1U', 'timeIncrement': 1.20271149091423e-06, 'increment': 23, 
    'stepTime': 0.00381069104387425, 'step': 1, 'jobName': 'Job-2', 
    'severe': 2, 'iterations': 26, 'phase': STANDARD_PHASE, 'equilibrium': 24})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00381069104387425, 
    'attempts': ' 2U', 'timeIncrement': 1e-06, 'increment': 23, 
    'stepTime': 0.00381069104387425, 'step': 1, 'jobName': 'Job-2', 
    'severe': 2, 'iterations': 27, 'phase': STANDARD_PHASE, 'equilibrium': 25})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-1'].setValues(maxNumInc=4)
mdb.models['Model-1'].StaticStep(description='10', initialInc=1e-05, maxInc=
    1e-05, maxNumInc=10, minInc=1e-10, name='Step-2', previous='Step-1')
mdb.models['Model-1'].StaticStep(name='Step-3', previous='Step-2')
mdb.models['Model-1'].steps['Step-3'].setValues(initialInc=1e-05, maxInc=0.0001
    , minInc=1e-08)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 6740, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 1e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 2, 'stepTime': 2e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.5e-05, 'attempts': 1, 
    'timeIncrement': 1.5e-05, 'increment': 3, 'stepTime': 3.5e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5.75e-05, 'attempts': 1, 
    'timeIncrement': 2.25e-05, 'increment': 4, 'stepTime': 5.75e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many increments needed to complete the step', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-2'].setValues(description='', initialInc=
    1e-06, maxNumInc=10)
mdb.models['Model-1'].steps['Step-1'].setValues(minInc=1e-08)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 23908, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 1e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 2, 'stepTime': 2e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.5e-05, 'attempts': 1, 
    'timeIncrement': 1.5e-05, 'increment': 3, 'stepTime': 3.5e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5.75e-05, 'attempts': 1, 
    'timeIncrement': 2.25e-05, 'increment': 4, 'stepTime': 5.75e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many increments needed to complete the step', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-1'].setValues()
mdb.models['Model-1'].steps['Step-2'].setValues(noStop=OFF, 
    timeIncrementationMethod=FIXED)
# Save by Ricardo Fitas on 2022_01_04-23.51.32; build 2021 2020_03_06-14.50.37 167380
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 31660, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 1e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 2, 'stepTime': 2e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.5e-05, 'attempts': 1, 
    'timeIncrement': 1.5e-05, 'increment': 3, 'stepTime': 3.5e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5.75e-05, 'attempts': 1, 
    'timeIncrement': 2.25e-05, 'increment': 4, 'stepTime': 5.75e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many increments needed to complete the step', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-1'].setValues(initialInc=1e-05, maxInc=1e-05, 
    maxNumInc=20)
mdb.models['Model-1'].steps['Step-1'].setValues(noStop=OFF, 
    timeIncrementationMethod=FIXED)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 14812, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 1e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 2, 'stepTime': 2e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 3, 'stepTime': 3e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 4e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 4, 'stepTime': 4e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 5, 'stepTime': 5e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 6e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 6, 'stepTime': 6e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 7e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 7, 'stepTime': 7e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 8e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 8, 'stepTime': 8e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 9e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 9, 'stepTime': 9e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0001, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 10, 'stepTime': 0.0001, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00011, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 11, 'stepTime': 0.00011, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00012, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 12, 'stepTime': 0.00012, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00013, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 13, 'stepTime': 0.00013, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00014, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 14, 'stepTime': 0.00014, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00015, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 15, 'stepTime': 0.00015, 'step': 1, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00016, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 16, 'stepTime': 0.00016, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00017, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 17, 'stepTime': 0.00017, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00018, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 18, 'stepTime': 0.00018, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.00019, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 19, 'stepTime': 0.00019, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0002, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 20, 'stepTime': 0.0002, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many increments needed to complete the step', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].rootAssembly.Set(name='Set-40', referencePoints=(
    mdb.models['Model-1'].rootAssembly.instances['G1'].referencePoints[2], ))
mdb.models['Model-1'].Moment(cm3=0.3, createStepName='Step-1', 
    distributionType=UNIFORM, field='', localCsys=None, name='Load-1', region=
    mdb.models['Model-1'].rootAssembly.sets['Set-40'])
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 24880, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 1e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 2, 'stepTime': 2e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 3, 'stepTime': 3e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 4e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 4, 'stepTime': 4e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-1', ur3=FREED)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 5, 'stepTime': 5e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 6e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 6, 'stepTime': 6e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 7e-05, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 7, 'stepTime': 7e-05, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
#* Unable to start analysis job
#* Abaqus Error: Detected lock file Job-2.lck. Please confirm that no other 
#* applications are attempting to write to the output database associated with 
#* this job before removing the lock file and resubmitting.
#* Abaqus/Analysis exited with error(s).
#* 
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 21684, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Fixed time increment is too large', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-1'].setValues(initialInc=1e-10)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 35508, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 279.719E+09  .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1e-10, 'attempts': 1, 
    'timeIncrement': 1e-10, 'increment': 1, 'stepTime': 1e-10, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2e-10, 'attempts': 1, 
    'timeIncrement': 1e-10, 'increment': 2, 'stepTime': 2e-10, 'step': 1, 
    'jobName': 'Job-2', 'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3e-10, 'attempts': 1, 
    'timeIncrement': 1e-10, 'increment': 3, 'stepTime': 3e-10, 'step': 1, 
    'jobName': 'Job-2', 'severe': 3, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.29 D.O.F. 2 ratio = 21.4212E+09 .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 4e-10, 'attempts': 1, 
    'timeIncrement': 1e-10, 'increment': 4, 'stepTime': 4e-10, 'step': 1, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5e-10, 'attempts': 1, 
    'timeIncrement': 1e-10, 'increment': 5, 'stepTime': 5e-10, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 6e-10, 'attempts': 1, 
    'timeIncrement': 1e-10, 'increment': 6, 'stepTime': 6e-10, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 7e-10, 'attempts': 1, 
    'timeIncrement': 1e-10, 'increment': 7, 'stepTime': 7e-10, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 8e-10, 'attempts': 1, 
    'timeIncrement': 1e-10, 'increment': 8, 'stepTime': 8e-10, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 9e-10, 'attempts': 1, 
    'timeIncrement': 1e-10, 'increment': 9, 'stepTime': 9e-10, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1e-09, 'attempts': 1, 
    'timeIncrement': 1e-10, 'increment': 10, 'stepTime': 1e-09, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.1e-09, 'attempts': 1, 
    'timeIncrement': 1e-10, 'increment': 11, 'stepTime': 1.1e-09, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.2e-09, 'attempts': 1, 
    'timeIncrement': 1e-10, 'increment': 12, 'stepTime': 1.2e-09, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.3e-09, 'attempts': 1, 
    'timeIncrement': 1e-10, 'increment': 13, 'stepTime': 1.3e-09, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.4e-09, 'attempts': 1, 
    'timeIncrement': 1e-10, 'increment': 14, 'stepTime': 1.4e-09, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.5e-09, 'attempts': 1, 
    'timeIncrement': 1e-10, 'increment': 15, 'stepTime': 1.5e-09, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.6e-09, 'attempts': 1, 
    'timeIncrement': 1e-10, 'increment': 16, 'stepTime': 1.6e-09, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.7e-09, 'attempts': 1, 
    'timeIncrement': 1e-10, 'increment': 17, 'stepTime': 1.7e-09, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.8e-09, 'attempts': 1, 
    'timeIncrement': 1e-10, 'increment': 18, 'stepTime': 1.8e-09, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.9e-09, 'attempts': 1, 
    'timeIncrement': 1e-10, 'increment': 19, 'stepTime': 1.9e-09, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-1'].setValues(initialInc=1e-09, maxInc=1e-08, 
    minInc=1e-11, timeIncrementationMethod=AUTOMATIC)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 27780, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1e-09, 'attempts': 1, 
    'timeIncrement': 1e-09, 'increment': 1, 'stepTime': 1e-09, 'step': 1, 
    'jobName': 'Job-2', 'severe': 6, 'iterations': 8, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2e-09, 'attempts': 1, 
    'timeIncrement': 1e-09, 'increment': 2, 'stepTime': 2e-09, 'step': 1, 
    'jobName': 'Job-2', 'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.5e-09, 'attempts': 1, 
    'timeIncrement': 1.5e-09, 'increment': 3, 'stepTime': 3.5e-09, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5.75e-09, 'attempts': 1, 
    'timeIncrement': 2.25e-09, 'increment': 4, 'stepTime': 5.75e-09, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 9.125e-09, 'attempts': 1, 
    'timeIncrement': 3.375e-09, 'increment': 5, 'stepTime': 9.125e-09, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.41875e-08, 'attempts': 1, 
    'timeIncrement': 5.0625e-09, 'increment': 6, 'stepTime': 1.41875e-08, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.178125e-08, 'attempts': 1, 
    'timeIncrement': 7.59375e-09, 'increment': 7, 'stepTime': 2.178125e-08, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].loads['Load-1'].setValuesInStep(cm3=300.0, stepName=
    'Step-3')
mdb.models['Model-1'].loads['Load-1'].setValues(cm3=300.0, distributionType=
    UNIFORM, field='')
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 30184, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1e-09, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 2.5e-10, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1656 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 3097 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 6.25e-11, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.20 D.O.F. 2 ratio = 17.0623E+12 .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2003 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 8323 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 1.5625e-11, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.34 D.O.F. 2 ratio = 6.93725E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 375 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 3 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 1e-11, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-1'].setValues(initialInc=1e-13, minInc=1e-16)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 9092, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 279.719E+09  .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1e-13, 'attempts': 1, 
    'timeIncrement': 1e-13, 'increment': 1, 'stepTime': 1e-13, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2e-13, 'attempts': 1, 
    'timeIncrement': 1e-13, 'increment': 2, 'stepTime': 2e-13, 'step': 1, 
    'jobName': 'Job-2', 'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.5e-13, 'attempts': 1, 
    'timeIncrement': 1.5e-13, 'increment': 3, 'stepTime': 3.5e-13, 'step': 1, 
    'jobName': 'Job-2', 'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5.75e-13, 'attempts': 1, 
    'timeIncrement': 2.25e-13, 'increment': 4, 'stepTime': 5.75e-13, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 9.125e-13, 'attempts': 1, 
    'timeIncrement': 3.375e-13, 'increment': 5, 'stepTime': 9.125e-13, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.41875e-12, 'attempts': 1, 
    'timeIncrement': 5.0625e-13, 'increment': 6, 'stepTime': 1.41875e-12, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.178125e-12, 'attempts': 1, 
    'timeIncrement': 7.59375e-13, 'increment': 7, 'stepTime': 2.178125e-12, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.3171875e-12, 'attempts': 1, 
    'timeIncrement': 1.1390625e-12, 'increment': 8, 'stepTime': 3.3171875e-12, 
    'step': 1, 'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.29 D.O.F. 2 ratio = 831.886E+09  .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 2 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 11 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.29 D.O.F. 2 ratio = 9.99191E+09.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.3171875e-12, 
    'attempts': ' 1U', 'timeIncrement': 1.70859375e-12, 'increment': 9, 
    'stepTime': 3.3171875e-12, 'step': 1, 'jobName': 'Job-2', 'severe': 7, 
    'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.7443359375e-12, 
    'attempts': 2, 'timeIncrement': 4.271484375e-13, 'increment': 9, 
    'stepTime': 3.7443359375e-12, 'step': 1, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-1'].setValues(maxNumInc=3)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 4.38505859375e-12, 
    'attempts': 1, 'timeIncrement': 6.4072265625e-13, 'increment': 10, 
    'stepTime': 4.38505859375e-12, 'step': 1, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 5.346142578125e-12, 
    'attempts': 1, 'timeIncrement': 9.61083984375e-13, 'increment': 11, 
    'stepTime': 5.346142578125e-12, 'step': 1, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-2'].setValues(initialInc=1e-07)
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.29 D.O.F. 2 ratio = 1.78151E+12.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-2'].setValues(timeIncrementationMethod=
    AUTOMATIC)
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 4 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 44 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 9 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
#* Unable to start analysis job
#* Abaqus Error: Detected lock file Job-2.lck. Please confirm that no other 
#* applications are attempting to write to the output database associated with 
#* this job before removing the lock file and resubmitting.
#* Abaqus/Analysis exited with error(s).
#* 
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 27084, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 1.65832E+12.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'Solver problem. Numerical singularity when processing node G1.63 D.O.F. 2 ratio = 279.719E+09  .', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1e-13, 'attempts': 1, 
    'timeIncrement': 1e-13, 'increment': 1, 'stepTime': 1e-13, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2e-13, 'attempts': 1, 
    'timeIncrement': 1e-13, 'increment': 2, 'stepTime': 2e-13, 'step': 1, 
    'jobName': 'Job-2', 'severe': 2, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.5e-13, 'attempts': 1, 
    'timeIncrement': 1.5e-13, 'increment': 3, 'stepTime': 3.5e-13, 'step': 1, 
    'jobName': 'Job-2', 'severe': 3, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many increments needed to complete the step', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
del mdb.models['Model-1'].loads['Load-1']
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-1', ur3=0.02)
mdb.models['Model-1'].steps['Step-1'].setValues(initialInc=0.001, noStop=OFF, 
    timeIncrementationMethod=FIXED)
mdb.models['Model-1'].steps['Step-1'].setValues(maxNumInc=300)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 10112, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.001, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 1, 'stepTime': 0.001, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.002, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 2, 'stepTime': 0.002, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.003, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 3, 'stepTime': 0.003, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.004, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 4, 'stepTime': 0.004, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.005, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 5, 'stepTime': 0.005, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.006, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 6, 'stepTime': 0.006, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-1', ur3=0.2)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 12884, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.001, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 1, 'stepTime': 0.001, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.002, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 2, 'stepTime': 0.002, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.003, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 3, 'stepTime': 0.003, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.004, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 4, 'stepTime': 0.004, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.005, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 5, 'stepTime': 0.005, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.006, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 6, 'stepTime': 0.006, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.007, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 7, 'stepTime': 0.007, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.008, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 8, 'stepTime': 0.008, 'step': 1, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.009, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 9, 'stepTime': 0.009, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.01, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 10, 'stepTime': 0.01, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.011, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 11, 'stepTime': 0.011, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.012, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 12, 'stepTime': 0.012, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.013, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 13, 'stepTime': 0.013, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.014, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 14, 'stepTime': 0.014, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.015, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 15, 'stepTime': 0.015, 'step': 1, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.016, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 16, 'stepTime': 0.016, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.017, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 17, 'stepTime': 0.017, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.018, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 18, 'stepTime': 0.018, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.019, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 19, 'stepTime': 0.019, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.02, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 20, 'stepTime': 0.02, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.021, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 21, 'stepTime': 0.021, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.022, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 22, 'stepTime': 0.022, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.023, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 23, 'stepTime': 0.023, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.024, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 24, 'stepTime': 0.024, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.025, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 25, 'stepTime': 0.025, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.026, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 26, 'stepTime': 0.026, 'step': 1, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 26, 'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-1'].setValues(initialInc=1.0, maxNumInc=1)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.027, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 27, 'stepTime': 0.027, 'step': 1, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 27, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.028, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 28, 'stepTime': 0.028, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 28, 'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-1', ur3=0.0002)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.029, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 29, 'stepTime': 0.029, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 29, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.03, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 30, 'stepTime': 0.03, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 30, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.031, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 31, 'stepTime': 0.031, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 31, 'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-2', ur3=20.0)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.032, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 32, 'stepTime': 0.032, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 32, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.033, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 33, 'stepTime': 0.033, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 33, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.034, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 34, 'stepTime': 0.034, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 34, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.035, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 35, 'stepTime': 0.035, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 35, 'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-2'].setValues(initialInc=1.0, noStop=OFF, 
    timeIncrementationMethod=FIXED)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.036, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 36, 'stepTime': 0.036, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 36, 'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-2'].setValues(maxNumInc=100)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.037, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 37, 'stepTime': 0.037, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 37, 'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-2', ur3=2e-05)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.038, 'attempts': 1, 
    'timeIncrement': 0.001, 'increment': 38, 'stepTime': 0.038, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 38, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
#* Unable to start analysis job
#* Abaqus Error: Detected lock file Job-2.lck. Please confirm that no other 
#* applications are attempting to write to the output database associated with 
#* this job before removing the lock file and resubmitting.
#* Abaqus/Analysis exited with error(s).
#* 
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 5820, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1399.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00001, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 1e-05, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00002, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 2, 'stepTime': 2e-05, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.000035, 'attempts': 1, 
    'timeIncrement': 1.5e-05, 'increment': 3, 'stepTime': 3.5e-05, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0000575, 'attempts': 1, 
    'timeIncrement': 2.25e-05, 'increment': 4, 'stepTime': 5.75e-05, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00009125, 'attempts': 1, 
    'timeIncrement': 3.375e-05, 'increment': 5, 'stepTime': 9.125e-05, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.000141875, 'attempts': 1, 
    'timeIncrement': 5.0625e-05, 'increment': 6, 'stepTime': 0.000141875, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0002178125, 'attempts': 1, 
    'timeIncrement': 7.59375e-05, 'increment': 7, 'stepTime': 0.0002178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0003178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 8, 'stepTime': 0.0003178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0004178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 9, 'stepTime': 0.0004178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0005178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 10, 'stepTime': 0.0005178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-1', ur3=0.02)
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-2', ur3=0.0002)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 34908, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 18 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 13 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'DISPLACEMENT INCREMENT FOR CONTACT IS TOO BIG.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 29 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Fixed time increment is too large', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 3, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-1', ur3=0.002)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 2772, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1413.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 212.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['Job-2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1411.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00001, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 1e-05, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00002, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 2, 'stepTime': 2e-05, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.000035, 'attempts': 1, 
    'timeIncrement': 1.5e-05, 'increment': 3, 'stepTime': 3.5e-05, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0000575, 'attempts': 1, 
    'timeIncrement': 2.25e-05, 'increment': 4, 'stepTime': 5.75e-05, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00009125, 'attempts': 1, 
    'timeIncrement': 3.375e-05, 'increment': 5, 'stepTime': 9.125e-05, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.000141875, 'attempts': 1, 
    'timeIncrement': 5.0625e-05, 'increment': 6, 'stepTime': 0.000141875, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValues(ur3=SET)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0002178125, 'attempts': 1, 
    'timeIncrement': 7.59375e-05, 'increment': 7, 'stepTime': 0.0002178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0003178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 8, 'stepTime': 0.0003178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0004178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 9, 'stepTime': 0.0004178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0005178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 10, 'stepTime': 0.0005178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0006178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 11, 'stepTime': 0.0006178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 11, 'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-1', ur3=0.0002)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0007178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 12, 'stepTime': 0.0007178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 12, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0008178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 13, 'stepTime': 0.0008178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 13, 'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-1'].setValues(maxNumInc=10)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0009178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 14, 'stepTime': 0.0009178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 14, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0010178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 15, 'stepTime': 0.0010178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 15, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
#* Unable to start analysis job
#* Abaqus Error: Detected lock file Job-2.lck. Please confirm that no other 
#* applications are attempting to write to the output database associated with 
#* this job before removing the lock file and resubmitting.
#* Abaqus/Analysis exited with error(s).
#* 
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 1416, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1399.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00001, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 1e-05, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00002, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 2, 'stepTime': 2e-05, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.000035, 'attempts': 1, 
    'timeIncrement': 1.5e-05, 'increment': 3, 'stepTime': 3.5e-05, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-1'].setValues(initialInc=0.1)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0000575, 'attempts': 1, 
    'timeIncrement': 2.25e-05, 'increment': 4, 'stepTime': 5.75e-05, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 19064, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 3, 'stepTime': 0.3, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.4, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 4, 'stepTime': 0.4, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 5, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.6, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 6, 'stepTime': 0.6, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.7, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 7, 'stepTime': 0.7, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.8, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 8, 'stepTime': 0.8, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.9, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 9, 'stepTime': 0.9, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 10, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-1', ur3=0.004)
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-2', ur3=0.0004)
mdb.models['Model-1'].steps['Step-2'].setValues(initialInc=0.1, maxNumInc=10)
mdb.jobs['CS1_job'].submit(consistencyChecking=OFF)
mdb.jobs['CS1_job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(INTERRUPTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'CS1_job'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['CS1_job']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'CS1_job'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 24824, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 3, 'stepTime': 0.3, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.4, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 4, 'stepTime': 0.4, 'step': 1, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 5, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.6, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 6, 'stepTime': 0.6, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-1'].setValues(maxNumInc=3, timePeriod=0.3)
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
#* Unable to start analysis job
#* Abaqus Error: Detected lock file Job-2.lck. Please confirm that no other 
#* applications are attempting to write to the output database associated with 
#* this job before removing the lock file and resubmitting.
#* Abaqus/Analysis exited with error(s).
#* 
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 7580, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 1, 
    'jobName': 'Job-2', 'severe': 3, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 3, 'stepTime': 0.3, 'step': 1, 
    'jobName': 'Job-2', 'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1432.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 212.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.4, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.5, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-1'].setValues(initialInc=1.0, maxNumInc=1, 
    timePeriod=1.0)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.6, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 3, 'stepTime': 0.3, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.7, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 4, 'stepTime': 0.4, 'step': 2, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.8, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 5, 'stepTime': 0.5, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 0.9, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 6, 'stepTime': 0.6, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 7, 'stepTime': 0.7, 'step': 2, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-1', ur3=0.001)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 8, 'stepTime': 0.8, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-2', ur3=0.0001)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 9, 'stepTime': 0.9, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
#* Unable to start analysis job
#* Abaqus Error: Detected lock file Job-2.lck. Please confirm that no other 
#* applications are attempting to write to the output database associated with 
#* this job before removing the lock file and resubmitting.
#* Abaqus/Analysis exited with error(s).
#* 
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 19012, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 3, 'stepTime': 0.3, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.4, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 4, 'stepTime': 0.4, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.5, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 5, 'stepTime': 0.5, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.6, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 6, 'stepTime': 0.6, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.7, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 7, 'stepTime': 0.7, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.8, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 8, 'stepTime': 0.8, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.9, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 9, 'stepTime': 0.9, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 10, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1399.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00001, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 1, 'stepTime': 1e-05, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00002, 'attempts': 1, 
    'timeIncrement': 1e-05, 'increment': 2, 'stepTime': 2e-05, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.000035, 'attempts': 1, 
    'timeIncrement': 1.5e-05, 'increment': 3, 'stepTime': 3.5e-05, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0000575, 'attempts': 1, 
    'timeIncrement': 2.25e-05, 'increment': 4, 'stepTime': 5.75e-05, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00009125, 'attempts': 1, 
    'timeIncrement': 3.375e-05, 'increment': 5, 'stepTime': 9.125e-05, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.000141875, 'attempts': 1, 
    'timeIncrement': 5.0625e-05, 'increment': 6, 'stepTime': 0.000141875, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0002178125, 'attempts': 1, 
    'timeIncrement': 7.59375e-05, 'increment': 7, 'stepTime': 0.0002178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0003178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 8, 'stepTime': 0.0003178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0004178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 9, 'stepTime': 0.0004178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0005178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 10, 'stepTime': 0.0005178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0006178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 11, 'stepTime': 0.0006178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 11, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0007178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 12, 'stepTime': 0.0007178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 12, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0008178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 13, 'stepTime': 0.0008178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 13, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0009178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 14, 'stepTime': 0.0009178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 14, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0010178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 15, 'stepTime': 0.0010178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 15, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0011178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 16, 'stepTime': 0.0011178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 16, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0012178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 17, 'stepTime': 0.0012178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 17, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0013178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 18, 'stepTime': 0.0013178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 18, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0014178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 19, 'stepTime': 0.0014178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 19, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0015178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 20, 'stepTime': 0.0015178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 20, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0016178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 21, 'stepTime': 0.0016178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 21, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0017178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 22, 'stepTime': 0.0017178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 22, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0018178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 23, 'stepTime': 0.0018178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 23, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0019178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 24, 'stepTime': 0.0019178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 24, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0020178125, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 25, 'stepTime': 0.0020178125, 
    'step': 3, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 25, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00211781250001, 
    'attempts': 1, 'timeIncrement': 0.0001, 'increment': 26, 
    'stepTime': 0.0021178125, 'step': 3, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 26, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00221781250001, 
    'attempts': 1, 'timeIncrement': 0.0001, 'increment': 27, 
    'stepTime': 0.0022178125, 'step': 3, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 27, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00231781250001, 
    'attempts': 1, 'timeIncrement': 0.0001, 'increment': 28, 
    'stepTime': 0.0023178125, 'step': 3, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 28, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00241781250001, 
    'attempts': 1, 'timeIncrement': 0.0001, 'increment': 29, 
    'stepTime': 0.0024178125, 'step': 3, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 29, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00251781250001, 
    'attempts': 1, 'timeIncrement': 0.0001, 'increment': 30, 
    'stepTime': 0.0025178125, 'step': 3, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 30, 'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-2', ur3=0.001)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00261781250001, 
    'attempts': 1, 'timeIncrement': 0.0001, 'increment': 31, 
    'stepTime': 0.0026178125, 'step': 3, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 31, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00271781250001, 
    'attempts': 1, 'timeIncrement': 0.0001, 'increment': 32, 
    'stepTime': 0.0027178125, 'step': 3, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 32, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00281781250001, 
    'attempts': 1, 'timeIncrement': 0.0001, 'increment': 33, 
    'stepTime': 0.0028178125, 'step': 3, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 33, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00291781250001, 
    'attempts': 1, 'timeIncrement': 0.0001, 'increment': 34, 
    'stepTime': 0.0029178125, 'step': 3, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 34, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00301781250001, 
    'attempts': 1, 'timeIncrement': 0.0001, 'increment': 35, 
    'stepTime': 0.0030178125, 'step': 3, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 35, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00311781250001, 
    'attempts': 1, 'timeIncrement': 0.0001, 'increment': 36, 
    'stepTime': 0.0031178125, 'step': 3, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 36, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.00321781250001, 
    'attempts': 1, 'timeIncrement': 0.0001, 'increment': 37, 
    'stepTime': 0.0032178125, 'step': 3, 'jobName': 'Job-2', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 37, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-1', ur3=10.0)
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-1', ur3=0.001)
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-2', ur3=0.002)
mdb.models['Model-1'].steps['Step-2'].setValues(initialInc=0.01, maxNumInc=100)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['CS1_job'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['CS1_job']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'CS1_job'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-2'})
mdb.jobs['CS1_job']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(INTERRUPTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'CS1_job'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['CS1_job']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'CS1_job'})
mdb.jobs['CS1_job']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'CS1_job'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 17468, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.01, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 1, 'stepTime': 0.01, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.02, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 2, 'stepTime': 0.02, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.03, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 3, 'stepTime': 0.03, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.04, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 4, 'stepTime': 0.04, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.05, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 5, 'stepTime': 0.05, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.06, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 6, 'stepTime': 0.06, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.07, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 7, 'stepTime': 0.07, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.08, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 8, 'stepTime': 0.08, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.09, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 9, 'stepTime': 0.09, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 10, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.11, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 11, 'stepTime': 0.11, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 11, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.12, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 12, 'stepTime': 0.12, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 12, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.13, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 13, 'stepTime': 0.13, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 13, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.14, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 14, 'stepTime': 0.14, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 14, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.15, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 15, 'stepTime': 0.15, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 15, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.16, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 16, 'stepTime': 0.16, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 16, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.17, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 17, 'stepTime': 0.17, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 17, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.18, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 18, 'stepTime': 0.18, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 18, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.19, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 19, 'stepTime': 0.19, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 19, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 20, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 20, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.21, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 21, 'stepTime': 0.21, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 21, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.22, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 22, 'stepTime': 0.22, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 22, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.23, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 23, 'stepTime': 0.23, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 23, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.24, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 24, 'stepTime': 0.24, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 24, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.25, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 25, 'stepTime': 0.25, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 25, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.26, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 26, 'stepTime': 0.26, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 26, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.27, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 27, 'stepTime': 0.27, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 27, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.28, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 28, 'stepTime': 0.28, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 28, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.29, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 29, 'stepTime': 0.29, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 29, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.3, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 30, 'stepTime': 0.3, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 30, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.31, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 31, 'stepTime': 0.31, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 31, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.32, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 32, 'stepTime': 0.32, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 32, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.33, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 33, 'stepTime': 0.33, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 33, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.34, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 34, 'stepTime': 0.34, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 34, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.35, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 35, 'stepTime': 0.35, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 35, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.36, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 36, 'stepTime': 0.36, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 36, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.37, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 37, 'stepTime': 0.37, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 37, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.38, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 38, 'stepTime': 0.38, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 38, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.39, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 39, 'stepTime': 0.39, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 39, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.4, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 40, 'stepTime': 0.4, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 40, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.41, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 41, 'stepTime': 0.41, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 41, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.42, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 42, 'stepTime': 0.42, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 42, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.43, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 43, 'stepTime': 0.43, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 43, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.44, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 44, 'stepTime': 0.44, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 44, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.45, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 45, 'stepTime': 0.45, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 45, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.46, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 46, 'stepTime': 0.46, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 46, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.47, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 47, 'stepTime': 0.47, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 47, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.48, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 48, 'stepTime': 0.48, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 48, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.49, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 49, 'stepTime': 0.49, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 49, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.5, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 50, 'stepTime': 0.5, 'step': 2, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 50, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.51, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 51, 'stepTime': 0.51, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 51, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.52, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 52, 'stepTime': 0.52, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 52, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.53, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 53, 'stepTime': 0.53, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 53, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.54, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 54, 'stepTime': 0.54, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 54, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.55, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 55, 'stepTime': 0.55, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 55, 'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-1', ur3=0.00149)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.56, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 56, 'stepTime': 0.56, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 56, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.57, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 57, 'stepTime': 0.57, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 57, 'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-2', ur3=0.0015)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.58, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 58, 'stepTime': 0.58, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 58, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.59, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 59, 'stepTime': 0.59, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 59, 'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-2'].setValues(initialInc=0.1, maxNumInc=10)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.6, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 60, 'stepTime': 0.6, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 60, 'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-3', ur3=0.002)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.61, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 61, 'stepTime': 0.61, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 61, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.62, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 62, 'stepTime': 0.62, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 62, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.63, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 63, 'stepTime': 0.63, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 63, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.64, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 64, 'stepTime': 0.64, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 64, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.65, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 65, 'stepTime': 0.65, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 65, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.66, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 66, 'stepTime': 0.66, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 66, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.67, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 67, 'stepTime': 0.67, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 67, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.68, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 68, 'stepTime': 0.68, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 68, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.69, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 69, 'stepTime': 0.69, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 69, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.7, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 70, 'stepTime': 0.7, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 70, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.71, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 71, 'stepTime': 0.71, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 71, 'jobName': 'Job-2'})
mdb.models['Model-1'].steps['Step-3'].setValues(initialInc=0.1, maxNumInc=10, 
    noStop=OFF, timeIncrementationMethod=FIXED)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.72, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 72, 'stepTime': 0.72, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 72, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.73, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 73, 'stepTime': 0.73, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 73, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.74, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 74, 'stepTime': 0.74, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 74, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.75, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 75, 'stepTime': 0.75, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 75, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.76, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 76, 'stepTime': 0.76, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 76, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.77, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 77, 'stepTime': 0.77, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 77, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.78, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 78, 'stepTime': 0.78, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 78, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.79, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 79, 'stepTime': 0.79, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 79, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.8, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 80, 'stepTime': 0.8, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 80, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.81, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 81, 'stepTime': 0.81, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 81, 'jobName': 'Job-2'})
mdb.models['Model-1'].StaticStep(initialInc=0.1, maxNumInc=10, name='Step-4', 
    noStop=OFF, previous='Step-3', timeIncrementationMethod=FIXED)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.82, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 82, 'stepTime': 0.820000000000001, 
    'step': 2, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 82, 'jobName': 'Job-2'})
mdb.models['Model-1'].StaticStep(initialInc=0.1, maxNumInc=10, name='Step-5', 
    noStop=OFF, previous='Step-4', timeIncrementationMethod=FIXED)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.83, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 83, 'stepTime': 0.830000000000001, 
    'step': 2, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 83, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.84, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 84, 'stepTime': 0.840000000000001, 
    'step': 2, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 84, 'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-4', ur3=0.01)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.85, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 85, 'stepTime': 0.850000000000001, 
    'step': 2, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 85, 'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-5', ur3=0.1)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.86, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 86, 'stepTime': 0.860000000000001, 
    'step': 2, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 86, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.87, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 87, 'stepTime': 0.870000000000001, 
    'step': 2, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 87, 'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-5', ur3=0.2)
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.88, 'attempts': 1, 
    'timeIncrement': 0.01, 'increment': 88, 'stepTime': 0.880000000000001, 
    'step': 2, 'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 88, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
#* Unable to start analysis job
#* Abaqus Error: Detected lock file Job-2.lck. Please confirm that no other 
#* applications are attempting to write to the output database associated with 
#* this job before removing the lock file and resubmitting.
#* Abaqus/Analysis exited with error(s).
#* 
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF, datacheckJob=True)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
#* Unable to start analysis job
#* Abaqus Error: Detected lock file Job-2.lck. Please confirm that no other 
#* applications are attempting to write to the output database associated with 
#* this job before removing the lock file and resubmitting.
#* Abaqus/Analysis exited with error(s).
#* 
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 10012, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 3, 'stepTime': 0.3, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.4, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 4, 'stepTime': 0.4, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.5, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 5, 'stepTime': 0.5, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.6, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 6, 'stepTime': 0.6, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.7, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 7, 'stepTime': 0.7, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.8, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 8, 'stepTime': 0.8, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.9, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 9, 'stepTime': 0.9, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 10, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1413.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 212.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 3, 'stepTime': 0.3, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.4, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 4, 'stepTime': 0.4, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.5, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 5, 'stepTime': 0.5, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.6, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 6, 'stepTime': 0.6, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.7, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 7, 'stepTime': 0.7, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.8, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 8, 'stepTime': 0.8, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.9, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 9, 'stepTime': 0.9, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 10, 'stepTime': 1.0, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1413.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 212.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 4, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-2', ur3=0.00151)
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-1', ur3=0.0015)
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
#* Unable to start analysis job
#* Abaqus Error: Detected lock file Job-2.lck. Please confirm that no other 
#* applications are attempting to write to the output database associated with 
#* this job before removing the lock file and resubmitting.
#* Abaqus/Analysis exited with error(s).
#* 
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
mdb.jobs['Job-2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-2.odb', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 5804, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1402.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 211.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1413.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 212.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 3, 'stepTime': 0.3, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.4, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 4, 'stepTime': 0.4, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.5, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 5, 'stepTime': 0.5, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.6, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 6, 'stepTime': 0.6, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.7, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 7, 'stepTime': 0.7, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.8, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 8, 'stepTime': 0.8, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 1.9, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 9, 'stepTime': 0.9, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 10, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1413.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 212.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 3, 'stepTime': 0.3, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.4, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 4, 'stepTime': 0.4, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.5, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 5, 'stepTime': 0.5, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.6, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 6, 'stepTime': 0.6, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.7, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 7, 'stepTime': 0.7, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.8, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 8, 'stepTime': 0.8, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 8, 'jobName': 'Job-2'})
# Save by Ricardo Fitas on 2022_01_05-01.28.20; build 2021 2020_03_06-14.50.37 167380
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 2.9, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 9, 'stepTime': 0.9, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 10, 'stepTime': 1.0, 'step': 3, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1413.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 212.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 4, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 4, 
    'jobName': 'Job-2', 'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 3, 'stepTime': 0.3, 'step': 4, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 3, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.4, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 4, 'stepTime': 0.4, 'step': 4, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 4, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.5, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 5, 'stepTime': 0.5, 'step': 4, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 5, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.6, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 6, 'stepTime': 0.6, 'step': 4, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 6, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.7, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 7, 'stepTime': 0.7, 'step': 4, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 7, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.8, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 8, 'stepTime': 0.8, 'step': 4, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 8, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 3.9, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 9, 'stepTime': 0.9, 'step': 4, 
    'jobName': 'Job-2', 'severe': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 9, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 10, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 4.0, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 10, 'stepTime': 1.0, 'step': 4, 
    'jobName': 'Job-2', 'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'equilibrium': 2})
mdb.jobs['Job-2']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 5, 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 
    'frame': 0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-2', 'memory': 1418.0})
mdb.jobs['Job-2']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(MINIMUM_MEMORY, {'minimum_memory': 212.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 4.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 5, 
    'jobName': 'Job-2', 'severe': 2, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 
    'frame': 1, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 1 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'The system matrix has 14 negative eigenvalues.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Fixed time increment is too large', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(STATUS, {'totalTime': 4.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.1, 'step': 5, 
    'jobName': 'Job-2', 'severe': 4, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 0})
mdb.jobs['Job-2']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 
    'frame': 2, 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.jobs['Job-2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-2'})
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffffff:20 #1fff ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#ffffffff:14 #7f ]', ), ), size=0.04)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffff00 #37ffff #0:10 #fffffff4 #fb007fff #f #7000000', 
    ' #5 #0:2 #fffff000 #af ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#17fff #0:2 #60000000 #ff3ffffe #31ffff #0:3 #3ff3fe4', 
    ' #38000000 #bc00 #0 #ffd40000 #3f ]', ), ), size=0.002)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #10000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #1000 ]', ), ), number=5)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #10000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #400 ]', ), ), number=4)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
# Save by Ricardo Fitas on 2022_01_09-20.14.21; build 2021 2020_03_06-14.50.37 167380
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].Material(name='Material-2')
# Save by Ricardo Fitas on 2022_01_10-13.38.03; build 2021 2020_03_06-14.50.37 167380
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((1.0, 2.0, 12.0, 
    2.0, 3.0, 111.0, 22.0, 99.0, 45.0, 89.0, 87.0, 23.0, 34935.0, 2.0, 2.0, 
    0.0, 0.0, 129.0, 23.0, 329.0, 234.0), ), type=ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((1.0, 2.0, 12.0, 
    2.0, 3.0, 111.0, 22.0, 99.0, 45.0, 89.0, 87.0, 23.0, 34935.0, 2.0, 2.0, 
    0.0, 0.0, 129.0, 23.0, 329.0, 234.0), ), type=ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((1.0, 2.0, 12.0, 
    2.0, 3.0, 111.0, 22.0, 99.0, 45.0, 89.0, 87.0, 23.0, 34935.0, 2.0, 2.0, 
    0.0, 0.0, 129.0, 23.0, 329.0, 234.0), ), type=ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((1.0, 2.0, 12.0, 
    2.0, 3.0, 111.0, 22.0, 99.0, 45.0, 89.0, 87.0, 23.0, 34935.0, 2.0, 2.0, 
    0.0, 0.0, 129.0, 23.0, 329.0, 234.0), ), type=ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((1.0, 2.0, 12.0, 
    2.0, 3.0, 111.0, 22.0, 99.0, 45.0, 89.0, 87.0, 23.0, 34935.0, 2.0, 2.0, 
    0.0, 0.0, 129.0, 23.0, 329.0, 234.0), ), type=ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((1.0, 2.0, 12.0, 
    2.0, 3.0, 111.0, 22.0, 99.0, 45.0, 89.0, 87.0, 23.0, 34935.0, 2.0, 2.0, 
    0.0, 0.0, 129.0, 23.0, 329.0, 234.0), ), type=ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((1.0, 2.0, 12.0, 
    2.0, 3.0, 111.0, 22.0, 99.0, 45.0, 89.0, 87.0, 23.0, 34935.0, 2.0, 2.0, 
    0.0, 0.0, 129.0, 23.0, 329.0, 234.0), ), type=ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((1.0, 2.0, 12.0, 
    2.0, 3.0, 111.0, 22.0, 99.0, 45.0, 89.0, 87.0, 23.0, 34935.0, 2.0, 2.0, 
    0.0, 0.0, 129.0, 23.0, 329.0, 234.0), ), type=ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((1.0, 2.0, 12.0, 
    2.0, 3.0, 111.0, 22.0, 99.0, 45.0, 89.0, 87.0, 23.0, 34935.0, 2.0, 2.0, 
    0.0, 0.0, 129.0, 23.0, 329.0, 234.0), ), type=ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G1'].DatumCsysByThreePoints(coordSysType=CARTESIAN
    , line1=(1.0, 0.0, 0.0), line2=(0.0, 1.0, 0.0), name='Datum csys-1', 
    origin=(0.0, 0.0, 0.0))
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].orientation.setValues(
    localCsys=mdb.models['Model-1'].parts['G1'].datums[4], orientationType=
    SYSTEM)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].deletePlies(
    )
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material-1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((1.0, 2.0, 12.0, 
    2.0, 3.0, 111.0, 22.0, 99.0, 45.0, 89.0, 87.0, 23.0, 34935.0, 2.0, 2.0, 
    0.0, 0.0, 129.0, 23.0, 329.0, 234.0), ), type=ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((1.0, 2.0, 12.0, 
    2.0, 3.0, 111.0, 22.0, 99.0, 45.0, 89.0, 87.0, 23.0, 34935.0, 2.0, 2.0, 
    0.0, 0.0, 129.0, 23.0, 329.0, 234.0), ), type=ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((1.0, 2.0, 12.0, 
    2.0, 3.0, 111.0, 22.0, 99.0, 45.0, 89.0, 87.0, 23.0, 34935.0, 2.0, 2.0, 
    0.0, 0.0, 129.0, 23.0, 329.0, 234.0), ), type=ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((1.0, 2.0, 12.0, 
    2.0, 3.0, 111.0, 22.0, 99.0, 45.0, 89.0, 87.0, 23.0, 34935.0, 2.0, 2.0, 
    0.0, 0.0, 129.0, 23.0, 329.0, 234.0), ), type=ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G2'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((1.0, 2.0, 12.0, 
    2.0, 3.0, 111.0, 22.0, 99.0, 45.0, 89.0, 87.0, 23.0, 34935.0, 2.0, 2.0, 
    0.0, 0.0, 129.0, 23.0, 329.0, 234.0), ), type=ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G2'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffff00 #37ffff #0:10 #fffffff4 #fb007fff #f #7000000', 
    ' #5 #0:2 #fffff000 #af ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#17fff #0:2 #60000000 #ff3ffffe #31ffff #0:3 #3ff3fe4', 
    ' #38000000 #bc00 #0 #ffd40000 #3f ]', ), ), size=0.0002)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #10000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #400 ]', ), ), number=6)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.models['Model-1'].parts['G2'].DatumCsysByThreePoints(coordSysType=CARTESIAN
    , line1=(1.0, 0.0, 0.0), line2=(0.0, 1.0, 0.0), name='Datum csys-1', 
    origin=(0.0, 0.0, 0.0))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].fieldOutputRequests['F-Output-1'].setValues(variables=(
    'S', 'PE', 'PEEQ', 'PEMAG', 'LE', 'U', 'RF', 'CF', 'CSTRESS', 'CDISP', 
    'COORD'))
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((2.85714e-10, 
    -1e-10, 2.85714e-10, -1e-10, -1e-10, 2.85714e-10, 0.0, 0.0, 0.0, 
    7.69231e-10, 0.0, 0.0, 0.0, 0.0, 7.69231e-10, 0.0, 0.0, 0.0, 0.0, 0.0, 
    7.71429e-10), ), type=ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G2'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffff00 #37ffff #0:10 #fffffff4 #fb007fff #f #7000000', 
    ' #5 #0:2 #fffff000 #af ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#17fff #0:2 #60000000 #ff3ffffe #31ffff #0:3 #3ff3fe4', 
    ' #38000000 #bc00 #0 #ffd40000 #3f ]', ), ), size=0.0002)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #10000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #400 ]', ), ), number=4)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-proj_4', nodalOutputPrecision=SINGLE
    , numCpus=6, numDomains=6, numGPUs=1, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].orientation.setValues(
    localCsys=mdb.models['Model-1'].parts['G2'].datums[10])
mdb.jobs['Job-proj_4'].submit(consistencyChecking=OFF)
mdb.jobs['Job-proj_4']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '52 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\Job-proj_4.odb', 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 17200, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-proj_4', 'memory': 995.0})
mdb.jobs['Job-proj_4']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(MINIMUM_MEMORY, {'minimum_memory': 183.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-proj_4', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-proj_4']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 2, 
    'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 0, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-proj_4', 'memory': 1016.0})
mdb.jobs['Job-proj_4']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(MINIMUM_MEMORY, {'minimum_memory': 185.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 1.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 2, 
    'jobName': 'Job-proj_4', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 1, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 1.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 2, 
    'jobName': 'Job-proj_4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 2, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 1.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 3, 'stepTime': 0.3, 'step': 2, 
    'jobName': 'Job-proj_4', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 3, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 1.4, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 4, 'stepTime': 0.4, 'step': 2, 
    'jobName': 'Job-proj_4', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 4, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 1.5, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 5, 'stepTime': 0.5, 'step': 2, 
    'jobName': 'Job-proj_4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 5, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 1.6, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 6, 'stepTime': 0.6, 'step': 2, 
    'jobName': 'Job-proj_4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 6, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 1.7, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 7, 'stepTime': 0.7, 'step': 2, 
    'jobName': 'Job-proj_4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 7, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 1.8, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 8, 'stepTime': 0.8, 'step': 2, 
    'jobName': 'Job-proj_4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 8, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 1.9, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 9, 'stepTime': 0.9, 'step': 2, 
    'jobName': 'Job-proj_4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 9, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 1, 
    'frame': 10, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 2.0, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 10, 'stepTime': 1.0, 'step': 2, 
    'jobName': 'Job-proj_4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-proj_4']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 2, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 3, 
    'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 0, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-proj_4', 'memory': 1016.0})
mdb.jobs['Job-proj_4']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(MINIMUM_MEMORY, {'minimum_memory': 185.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 2.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 3, 
    'jobName': 'Job-proj_4', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 1, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 2.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 3, 
    'jobName': 'Job-proj_4', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 2, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 2.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 3, 'stepTime': 0.3, 'step': 3, 
    'jobName': 'Job-proj_4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 3, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 2.4, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 4, 'stepTime': 0.4, 'step': 3, 
    'jobName': 'Job-proj_4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 4, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 2.5, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 5, 'stepTime': 0.5, 'step': 3, 
    'jobName': 'Job-proj_4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 5, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 2.6, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 6, 'stepTime': 0.6, 'step': 3, 
    'jobName': 'Job-proj_4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 6, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 2.7, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 7, 'stepTime': 0.7, 'step': 3, 
    'jobName': 'Job-proj_4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 7, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 2.8, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 8, 'stepTime': 0.8, 'step': 3, 
    'jobName': 'Job-proj_4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 8, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 2.9, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 9, 'stepTime': 0.9, 'step': 3, 
    'jobName': 'Job-proj_4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 9, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 2, 
    'frame': 10, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 10, 'stepTime': 1.0, 'step': 3, 
    'jobName': 'Job-proj_4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-proj_4']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 3, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 4, 
    'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 0, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-proj_4', 'memory': 1016.0})
mdb.jobs['Job-proj_4']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(MINIMUM_MEMORY, {'minimum_memory': 185.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 3.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 4, 
    'jobName': 'Job-proj_4', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 1, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 3.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 4, 
    'jobName': 'Job-proj_4', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 2, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 3.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 3, 'stepTime': 0.3, 'step': 4, 
    'jobName': 'Job-proj_4', 'severe': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 3, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 3.4, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 4, 'stepTime': 0.4, 'step': 4, 
    'jobName': 'Job-proj_4', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 4, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 3.5, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 5, 'stepTime': 0.5, 'step': 4, 
    'jobName': 'Job-proj_4', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 5, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 3.6, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 6, 'stepTime': 0.6, 'step': 4, 
    'jobName': 'Job-proj_4', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 6, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 3.7, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 7, 'stepTime': 0.7, 'step': 4, 
    'jobName': 'Job-proj_4', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 7, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 3.8, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 8, 'stepTime': 0.8, 'step': 4, 
    'jobName': 'Job-proj_4', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 8, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 3.9, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 9, 'stepTime': 0.9, 'step': 4, 
    'jobName': 'Job-proj_4', 'severe': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 9, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 3, 
    'frame': 10, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 4.0, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 10, 'stepTime': 1.0, 'step': 4, 
    'jobName': 'Job-proj_4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-proj_4']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 4, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 5, 
    'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 
    'frame': 0, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-proj_4', 'memory': 1027.0})
mdb.jobs['Job-proj_4']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16222.0, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(MINIMUM_MEMORY, {'minimum_memory': 183.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 4.1, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 'step': 5, 
    'jobName': 'Job-proj_4', 'severe': 8, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 
    'frame': 1, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 4.2, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 'step': 5, 
    'jobName': 'Job-proj_4', 'severe': 3, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 
    'frame': 2, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 4.3, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 3, 'stepTime': 0.3, 'step': 5, 
    'jobName': 'Job-proj_4', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 
    'frame': 3, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 4.4, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 4, 'stepTime': 0.4, 'step': 5, 
    'jobName': 'Job-proj_4', 'severe': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 
    'frame': 4, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 4.5, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 5, 'stepTime': 0.5, 'step': 5, 
    'jobName': 'Job-proj_4', 'severe': 3, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 
    'frame': 5, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(STATUS, {'totalTime': 4.6, 'attempts': 1, 
    'timeIncrement': 0.1, 'increment': 6, 'stepTime': 0.6, 'step': 5, 
    'jobName': 'Job-proj_4', 'severe': 5, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['Job-proj_4']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 4, 
    'frame': 6, 'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-proj_4'})
mdb.jobs['Job-proj_4']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-proj_4'})
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=40, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-6', nodalOutputPrecision=SINGLE, 
    numCpus=4, numDomains=4, numGPUs=1, queue=None, resultsFormat=ODB, scratch=
    '', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-6'].submit(consistencyChecking=OFF)
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.jobs['Job-6']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'Job-6'})
mdb.jobs['Job-6']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'Job-6'})
mdb.jobs['Job-6']._Message(INTERRUPTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis interrupted by external signal', 'jobName': 'Job-6'})
mdb.jobs['Job-6']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-6'})
mdb.jobs['Job-6']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-6'})
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G2'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffff00 #37ffff #0:10 #fffffff4 #fb007fff #f #7000000', 
    ' #5 #0:2 #fffff000 #af ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#17fff #0:2 #60000000 #ff3ffffe #31ffff #0:3 #3ff3fe4', 
    ' #38000000 #bc00 #0 #ffd40000 #3f ]', ), ), size=0.0002)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #10000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #400 ]', ), ), number=4)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=40, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='parameters1', nodalOutputPrecision=
    SINGLE, numCpus=4, numDomains=4, numGPUs=1, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['parameters1'].submit(consistencyChecking=OFF)
mdb.jobs['parameters1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE IS NO ORIENTATION BY THE NAME ASSEMBLY_G2_ORI-1', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '33672 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '16 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST LE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST S IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST LE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST S IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST LE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST S IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST LE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST S IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST LE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST S IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\parameters1.odb', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'parameters1'})
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G2'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffff00 #37ffff #0:10 #fffffff4 #fb007fff #f #7000000', 
    ' #5 #0:2 #fffff000 #af ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#17fff #0:2 #60000000 #ff3ffffe #31ffff #0:3 #3ff3fe4', 
    ' #38000000 #bc00 #0 #ffd40000 #3f ]', ), ), size=0.0002)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #10000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #400 ]', ), ), number=4)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=40, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='parameters2', nodalOutputPrecision=
    SINGLE, numCpus=4, numDomains=4, numGPUs=1, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['parameters2'].submit(consistencyChecking=OFF)
mdb.jobs['parameters2']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE IS NO ORIENTATION BY THE NAME ASSEMBLY_G2_ORI-1', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '33672 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '16 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST LE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST S IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST LE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST S IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST LE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST S IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST LE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST S IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST LE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST S IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\parameters2.odb', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'parameters2'})
mdb.jobs['parameters2'].waitForCompletion()
del mdb.jobs['parameters1']
del mdb.jobs['parameters2']
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G2'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffff00 #37ffff #0:10 #fffffff4 #fb007fff #f #7000000', 
    ' #5 #0:2 #fffff000 #af ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#17fff #0:2 #60000000 #ff3ffffe #31ffff #0:3 #3ff3fe4', 
    ' #38000000 #bc00 #0 #ffd40000 #3f ]', ), ), size=0.0002)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #10000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #400 ]', ), ), number=4)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=40, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='parameters1', nodalOutputPrecision=
    SINGLE, numCpus=4, numDomains=4, numGPUs=1, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['parameters1'].submit(consistencyChecking=OFF)
mdb.jobs['parameters1'].waitForCompletion()
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G2'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffff00 #37ffff #0:10 #fffffff4 #fb007fff #f #7000000', 
    ' #5 #0:2 #fffff000 #af ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#17fff #0:2 #60000000 #ff3ffffe #31ffff #0:3 #3ff3fe4', 
    ' #38000000 #bc00 #0 #ffd40000 #3f ]', ), ), size=0.0002)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #10000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #400 ]', ), ), number=4)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=40, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='parameters2', nodalOutputPrecision=
    SINGLE, numCpus=4, numDomains=4, numGPUs=1, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['parameters2'].submit(consistencyChecking=OFF)
mdb.jobs['parameters2'].waitForCompletion()
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G2'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffff00 #37ffff #0:10 #fffffff4 #fb007fff #f #7000000', 
    ' #5 #0:2 #fffff000 #af ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#17fff #0:2 #60000000 #ff3ffffe #31ffff #0:3 #3ff3fe4', 
    ' #38000000 #bc00 #0 #ffd40000 #3f ]', ), ), size=0.0002)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #10000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #400 ]', ), ), number=4)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=40, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='parameters3', nodalOutputPrecision=
    SINGLE, numCpus=4, numDomains=4, numGPUs=1, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['parameters3'].submit(consistencyChecking=OFF)
mdb.jobs['parameters3'].waitForCompletion()
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G2'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffff00 #37ffff #0:10 #fffffff4 #fb007fff #f #7000000', 
    ' #5 #0:2 #fffff000 #af ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#17fff #0:2 #60000000 #ff3ffffe #31ffff #0:3 #3ff3fe4', 
    ' #38000000 #bc00 #0 #ffd40000 #3f ]', ), ), size=0.0002)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #10000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #400 ]', ), ), number=4)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=40, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='parameters4', nodalOutputPrecision=
    SINGLE, numCpus=4, numDomains=4, numGPUs=1, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['parameters4'].submit(consistencyChecking=OFF)
mdb.jobs['parameters4'].waitForCompletion()
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G2'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffff00 #37ffff #0:10 #fffffff4 #fb007fff #f #7000000', 
    ' #5 #0:2 #fffff000 #af ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#17fff #0:2 #60000000 #ff3ffffe #31ffff #0:3 #3ff3fe4', 
    ' #38000000 #bc00 #0 #ffd40000 #3f ]', ), ), size=0.005)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #10000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #400 ]', ), ), number=2)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=40, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='parameters5', nodalOutputPrecision=
    SINGLE, numCpus=4, numDomains=4, numGPUs=1, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['parameters5'].submit(consistencyChecking=OFF)
mdb.jobs['parameters5'].waitForCompletion()
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G2'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffff00 #37ffff #0:10 #fffffff4 #fb007fff #f #7000000', 
    ' #5 #0:2 #fffff000 #af ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#17fff #0:2 #60000000 #ff3ffffe #31ffff #0:3 #3ff3fe4', 
    ' #38000000 #bc00 #0 #ffd40000 #3f ]', ), ), size=0.001)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #10000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #400 ]', ), ), number=4)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=40, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='parameters6', nodalOutputPrecision=
    SINGLE, numCpus=4, numDomains=4, numGPUs=1, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['parameters6'].submit(consistencyChecking=OFF)
mdb.jobs['parameters6'].waitForCompletion()
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G2'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffff00 #37ffff #0:10 #fffffff4 #fb007fff #f #7000000', 
    ' #5 #0:2 #fffff000 #af ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#17fff #0:2 #60000000 #ff3ffffe #31ffff #0:3 #3ff3fe4', 
    ' #38000000 #bc00 #0 #ffd40000 #3f ]', ), ), size=0.0001)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #10000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #400 ]', ), ), number=4)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=40, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='parameters7', nodalOutputPrecision=
    SINGLE, numCpus=4, numDomains=4, numGPUs=1, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['parameters7'].submit(consistencyChecking=OFF)
mdb.jobs['parameters7'].waitForCompletion()
mdb.jobs['parameters7']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'parameters7'})
mdb.jobs['parameters7']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'parameters7'})
del mdb.jobs['parameters1']
del mdb.jobs['parameters2']
del mdb.jobs['parameters3']
del mdb.jobs['parameters4']
del mdb.jobs['parameters5']
del mdb.jobs['parameters6']
del mdb.jobs['parameters7']
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G2'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffff00 #37ffff #0:10 #fffffff4 #fb007fff #f #7000000', 
    ' #5 #0:2 #fffff000 #af ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#17fff #0:2 #60000000 #ff3ffffe #31ffff #0:3 #3ff3fe4', 
    ' #38000000 #bc00 #0 #ffd40000 #3f ]', ), ), size=0.0002)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #10000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #400 ]', ), ), number=4)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=40, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='parameters1', nodalOutputPrecision=
    SINGLE, numCpus=4, numDomains=4, numGPUs=1, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['parameters1'].submit(consistencyChecking=OFF)
mdb.jobs['parameters1'].waitForCompletion()
mdb.jobs['parameters1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'parameters1'})
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].parts['G2'].DatumCsysByThreePoints(coordSysType=CARTESIAN
    , line1=(1.0, 0.0, 0.0), line2=(0.0, 1.0, 0.0), name='Datum csys-2', 
    origin=(0.0, 0.0, 0.0))
mdb.models['Model-1'].parts['G2'].DatumCsysByThreePoints(coordSysType=CARTESIAN
    , line1=(1.0, 0.0, 0.0), line2=(0.0, 1.0, 0.0), name='Datum csys-3', 
    origin=(0.0, 0.0, 0.0))
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].parts['G2'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G2'].datums[10], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G2'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffff00 #37ffff #0:10 #fffffff4 #fb007fff #f #7000000', 
    ' #5 #0:2 #fffff000 #af ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#17fff #0:2 #60000000 #ff3ffffe #31ffff #0:3 #3ff3fe4', 
    ' #38000000 #bc00 #0 #ffd40000 #3f ]', ), ), size=0.0002)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #10000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #400 ]', ), ), number=4)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=40, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='parameters1', nodalOutputPrecision=
    SINGLE, numCpus=4, numDomains=4, numGPUs=1, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['parameters1'].submit(consistencyChecking=OFF)
mdb.jobs['parameters1'].waitForCompletion()
mdb.jobs['parameters1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'parameters1'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-1', ur3=0.0014)
mdb.jobs['parameters1'].submit(consistencyChecking=OFF)
mdb.jobs['parameters1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-K97QT0T', 'handle': 0, 'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THERE IS NO ORIENTATION BY THE NAME ASSEMBLY_G2_ORI-1', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '33672 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '16 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST LE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST S IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST LE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST S IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST LE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST S IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST LE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST S IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST LE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST S IS NOT AVAILABLE FOR ELEMENT TYPE C3D8R', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'FINITE ROTATION BOUNDARY CONDITION SPECIFIED IN MULTISTEP THREE-DIMENSIONAL ANALYSIS. TYPE=VELOCITY SHOULD BE USED', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST CF HAS BEEN REMOVED AS THERE ARE NO APPLICABLE LOADS IN THIS STEP', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\SIMULIA\\Commands\\parameters1.odb', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'parameters1'})
mdb.jobs['parameters1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'parameters1'})
mdb.models['Model-1'].boundaryConditions['BC-4'].setValuesInStep(stepName=
    'Step-1', ur3=0.0015)
# Save by Ricardo Fitas on 2022_01_11-00.18.03; build 2021 2020_03_06-14.50.37 167380
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G2'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G2'].datums[10], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffff00 #37ffff #0:10 #fffffff4 #fb007fff #f #7000000', 
    ' #5 #0:2 #fffff000 #af ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#17fff #0:2 #60000000 #ff3ffffe #31ffff #0:3 #3ff3fe4', 
    ' #38000000 #bc00 #0 #ffd40000 #3f ]', ), ), size=0.0002)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #10000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #400 ]', ), ), number=4)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='parameters9', nodalOutputPrecision=
    SINGLE, numCpus=4, numDomains=4, numGPUs=1, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['parameters9'].submit(consistencyChecking=OFF)
mdb.jobs['parameters9'].waitForCompletion()
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G2'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G2'].datums[10], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffff00 #37ffff #0:10 #fffffff4 #fb007fff #f #7000000', 
    ' #5 #0:2 #fffff000 #af ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#17fff #0:2 #60000000 #ff3ffffe #31ffff #0:3 #3ff3fe4', 
    ' #38000000 #bc00 #0 #ffd40000 #3f ]', ), ), size=0.0002)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #10000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #400 ]', ), ), number=4)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.jobs['parameters9']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'parameters9'})
mdb.jobs['parameters9']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'parameters9'})
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='parameters10', nodalOutputPrecision=
    SINGLE, numCpus=4, numDomains=4, numGPUs=1, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['parameters10'].submit(consistencyChecking=OFF)
mdb.jobs['parameters10'].waitForCompletion()
mdb.jobs['parameters10']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'parameters10'})
mdb.jobs['parameters10']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'parameters10'})
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G2'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G2'].datums[10], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-90.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=0.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=30.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=-30.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=60.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffff00 #37ffff #0:10 #fffffff4 #fb007fff #f #7000000', 
    ' #5 #0:2 #fffff000 #af ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#17fff #0:2 #60000000 #ff3ffffe #31ffff #0:3 #3ff3fe4', 
    ' #38000000 #bc00 #0 #ffd40000 #3f ]', ), ), size=0.0002)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #10000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #400 ]', ), ), number=4)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='parameters9', nodalOutputPrecision=
    SINGLE, numCpus=4, numDomains=4, numGPUs=1, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['parameters9'].submit(consistencyChecking=OFF)
mdb.jobs['parameters9'].waitForCompletion()
mdb.models['Model-1'].Material(name='Material1')
mdb.models['Model-1'].materials['Material1'].Elastic(table=((5617298193.91705, 
    3024703680.88407, 5617298193.91705, 3024703680.88407, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1299999610.00012, 0.0, 0.0, 0.0, 0.0, 
    1299999610.00012, 0.0, 0.0, 0.0, 0.0, 0.0, 1296295576.13209), ), type=
    ANISOTROPIC)
mdb.models['Model-1'].Material(name='Material2')
mdb.models['Model-1'].materials['Material2'].Elastic(table=((21948396468.8792, 
    3432897530.45033, 7339652589.16171, 3734210412.29096, 3024703680.88407, 
    5617298193.91705, 0.0, 0.0, 0.0, 1890000000.0, 0.0, 0.0, 0.0, 0.0, 
    1890000000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1802721088.43537), ), type=
    ANISOTROPIC)
del mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1']
del mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1']
mdb.models['Model-1'].interactionProperties['IntProp-1'].tangentialBehavior.setValues(
    dependencies=0, directionality=ISOTROPIC, elasticSlipStiffness=None, 
    formulation=PENALTY, fraction=0.005, maximumElasticSlip=FRACTION, 
    pressureDependency=OFF, shearStressLimit=None, slipRateDependency=OFF, 
    table=((0.2, ), ), temperatureDependency=OFF)
mdb.models['Model-1'].parts['G1'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G1'].datums[4], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G2'].CompositeLayup(description='', elementType=
    SOLID, name='CompositeLayup-1', symmetric=False, thicknessAssignment=
    FROM_SECTION)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].ReferenceOrientation(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, fieldName='', localCsys=
    mdb.models['Model-1'].parts['G2'].datums[10], orientationType=SYSTEM, 
    stackDirection=STACK_3)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].suppress(
    )
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-1', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-2', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-3', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-4', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material1', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=90.0, plyName='Ply-5', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G1'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].CompositePly(
    additionalRotationField='', additionalRotationType=ROTATION_NONE, angle=0.0
    , axis=AXIS_3, material='Material2', numIntPoints=1, orientationType=
    SPECIFY_ORIENT, orientationValue=45.0, plyName='Ply-6', region=Region(
    cells=mdb.models['Model-1'].parts['G2'].cells.getSequenceFromMask(mask=(
    '[#1 ]', ), )), suppressed=False, thickness=2.0, thicknessType=
    SPECIFY_THICKNESS)
mdb.models['Model-1'].parts['G1'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].parts['G2'].compositeLayups['CompositeLayup-1'].resume()
mdb.models['Model-1'].rootAssembly.deleteMesh(regions=
    mdb.models['Model-1'].rootAssembly.instances['G2'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].cells.getSequenceFromMask(
    mask=('[#1 ]', ), ))
mdb.models['Model-1'].rootAssembly.seedEdgeBySize(constraint=FINER, 
    deviationFactor=0.1, edges=
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#ffffff00 #37ffff #0:10 #fffffff4 #fb007fff #f #7000000', 
    ' #5 #0:2 #fffff000 #af ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#17fff #0:2 #60000000 #ff3ffffe #31ffff #0:3 #3ff3fe4', 
    ' #38000000 #bc00 #0 #ffd40000 #3f ]', ), ), size=0.0002)
mdb.models['Model-1'].rootAssembly.seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].rootAssembly.instances['G1'].edges.getSequenceFromMask(
    mask=('[#0:10 #10000 ]', ), )+\
    mdb.models['Model-1'].rootAssembly.instances['G2'].edges.getSequenceFromMask(
    mask=('[#0:15 #400 ]', ), ), number=4)
mdb.models['Model-1'].rootAssembly.generateMesh(regions=(
    mdb.models['Model-1'].rootAssembly.instances['G2'], 
    mdb.models['Model-1'].rootAssembly.instances['G1']))
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='parameters10', nodalOutputPrecision=
    SINGLE, numCpus=4, numDomains=4, numGPUs=1, queue=None, resultsFormat=ODB, 
    scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['parameters10'].submit(consistencyChecking=OFF)
mdb.jobs['parameters10'].waitForCompletion()
mdb.jobs['parameters10']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'parameters10'})
mdb.jobs['parameters10']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'parameters10'})
# Save by Ricardo Fitas on 2022_01_15-15.41.24; build 2021 2020_03_06-14.50.37 167380
